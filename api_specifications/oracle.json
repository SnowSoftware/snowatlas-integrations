{
  "openapi": "3.0.0",
  "info": {
    "title": "SAM: Oracle",
    "description": "API for interacting with Oracle.",
    "version": "1.0.0",
    "contact": {
      "name": "Snow Software, Inc.",
      "url": "https://www.snowsoftware.com"
    }
  },
  "servers": [
    {
        "url": "https://{region}.snowsoftware.io",
        "variables": {
            "region": {
                "enum": [
                    "westeurope",
                    "australiasoutheast",
                    "eastus2",
                    "uksouth"
                ],
                "default": "westeurope"
            }
        }
    }
  ],
  "tags": [
    {
      "name": "Categories"
    },
    {
      "name": "Compliance"
    },
    {
      "name": "Entitlements"
    },
    {
      "name": "Environment"
    },
    {
      "name": "Installations"
    },
    {
      "name": "License"
    },
    {
      "name": "Middleware"
    },
    {
      "name": "Partition"
    },
    {
      "name": "Product"
    }
  ],
  "paths": {
    "/sam/oracle/v1/database/entitlements/compliance/datacenters": {
      "get": {
        "description": "Returns a collection of license compliance statuses with any Oracle Database product.",
        "summary": "Get a collection of datacenter license compliance", 
        "operationId": "datacenters",
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "in": "query",
            "description": "The maximum number of items in the response.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "page_number",
            "in": "query",
            "description": "The page number.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },         
   	      {
            "name": "filter",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/license-assignments/datacenters": {
      "get": {
        "description": "Returns a collection of license assignments with any Oracle Database product.",
        "summary": "Get a collection of datacenter license assignments",
        "operationId": "datacenters2",
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/license-requirements/datacenters": {
      "get": {
        "description": "Returns a collection of license requirements with any Oracle Database product.",
        "operationId": "datacenters3",
        "summary": "Get datacenter licence requirements", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseRequirementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/compliance/servers": {
      "get": {
        "description": "Returns a collection of license compliance statuses with any Oracle Database product.",
        "operationId": "servers",
        "summary": "Get a collection of server compliance statuses", 
        "tags": [
          "Entitlements"
        ],        
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/license-assignments/servers": {
      "get": {
        "description": "Returns a collection of license assignments with any Oracle Database product.",
        "operationId": "servers2",
        "summary": "Get a collection of server license assignments", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/license-requirements/servers": {
      "get": {
        "description": "Returns a collection of license requirements with any Oracle Database product.",
        "operationId": "servers3",
        "summary": "Get a collection of server license requirements", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseRequirementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/compliance/virtual-machines": {
      "get": {
        "description": "Returns a collection of license compliance statuses with any Oracle Database product.",
        "operationId": "virtual-machines",
        "summary": "Get a collection of virtual machine license compliance", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/license-assignments/virtual-machines": {
      "get": {
        "description": "Returns a collection of license assignments with any Oracle Database product.",
        "operationId": "virtual-machines2",
        "summary": "Get a collection of virtual machine licence assignments", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/license-requirements/virtual-machines": {
      "get": {
        "description": "Returns a collection of license requirements with any Oracle Database product.",
        "operationId": "virtual-machines3",
        "summary": "Get a collection of virtual machine license requirements", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseRequirementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations": {
      "get": {
        "description": "Returns a collection of Oracle Database installations.",
        "operationId": "installations",
        "summary": "Get a collection of Database installations", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}": {
      "get": {
        "description": "Returns the details of a uniquely identified Oracle Database installation.",
        "operationId": "installations2",
        "summary": "Get details for a database installation",
                "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",

            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/servers": {
      "get": {
        "description": "Returns a collection of servers for a uniquely identified Oracle Database installation.",
        "summary": "Get collection of servers for an installation",
        "operationId": "servers4",
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",

            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationServerCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/instances": {
      "get": {
        "description": "Returns a collection of instances for a uniquely identified Oracle Database installation.",
        "summary": "Get a collection of instances for an installation", 
        "operationId": "instances",
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationInstanceCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/options": {
      "get": {
        "description": "Returns a collection of options for a uniquely identified Oracle Database installation.",
        "operationId": "options",
        "summary": "Get a collection of options for an installation", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationOptionCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/management-packs": {
      "get": {
        "description": "Returns a collection of management packs for a uniquely identified Oracle Database installation.",
        "operationId": "management-packs",
        "summary": "Get a collection of management packs for an installation", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationManagementPackCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/features": {
      "get": {
        "description": "Returns a collection of features for a uniquely identified Oracle Database installation.",
        "operationId": "features",
         "summary": "Get a collection of features for an installation", 
         "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationFeatureCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/users": {
      "get": {
        "description": "Returns a collection of users for a uniquely identified Oracle Database installation.",
        "operationId": "users",
        "summary": "Get a collection of users for an installation", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationUserCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/sessions": {
      "get": {
        "description": "Returns a collection of sessions for a uniquely identified Oracle Database installation.",
        "operationId": "sessions",
        "summary": "Get a collection of sessions for an installation", 
        "tags": [
          "Installations"
        ], 
        "parameters": [
          {
            "name": "id",
            "description": "The installation identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationSessionCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/installations/{id}/options/{oid}/usage": {
      "get": {
        "description": "Returns a collection of usage interpretations for a uniquely identified option and Oracle Database installation.",
        "operationId": "usage",
        "summary": "Get a collection of options for an installation", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oid",
            "description": "The option identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationOptionUsageCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/java/installations": {
      "get": {
        "description": "Returns a collection of Oracle Java installations.",
        "operationId": "installations3",
        "summary": "Get a collection of java installations", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfJavaInstallationCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: You are not authorized to make the request. This could be because the token is expired or revoked. The recommended action is to reauthenticate and retry once.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/java/installations/{id}": {
      "get": {
        "description": "Returns the details of a uniquely identified Oracle Java installation.",
        "operationId": "installations4",
         "summary": "Get details of a java installation", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The installation identifier.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/java/installations/{id}/features": {
      "get": {
        "description": "Returns a collection of features for a uniquely identified Oracle Java installation.",
        "operationId": "features2",
        "summary": "Get a collection of featured for a java Installation", 
        "tags": [
          "Installations"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfJavaInstallationFeatureCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: You are not authorized to make the request. This could be because the token is expired or revoked. The recommended action is to reauthenticate and retry once.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/compliance/datacenters": {
      "get": {
        "description": "Returns a collection of license compliance statuses with any Oracle Middleware product.",
        "operationId": "datacenters4",
        "summary": "Get a collection of compliance status for any middleware product", 
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/license-assignments/datacenters": {
      "get": {
        "description": "Returns a collection of license assignments with any Oracle Middleware product.",
        "operationId": "datacenters5",
         "tags": [
          "Middleware"
        ],
        "summary": "Get a collection of license assignments for any middleware product", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/license-requirements/datacenters": {
      "get": {
        "description": "Returns a collection of license requirements with any Oracle Middleware product.",
        "operationId": "datacenters6",
        "summary": "Get a collection of license requirements for any middleware product", 
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseRequirementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/compliance/servers": {
      "get": {
        "description": "Returns a collection of license compliance statuses with any Oracle Middleware product.",
        "operationId": "servers5",
         "tags": [
          "Middleware"
        ],
        "summary": "Get license compliance statuses for any middleware product", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/license-assignments/servers": {
      "get": {
        "description": "Returns a collection of license assignments with any Oracle Middleware product.",
        "operationId": "servers6",
         "tags": [
          "Middleware"
        ],
        "summary": "Get a collection of license compiance for milldeware servers", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/license-requirements/servers": {
      "get": {
        "description": "Returns a collection of license requirements with any Oracle Middleware product.",
        "operationId": "servers7",
         "tags": [
          "Middleware"
        ],
        "summary": "Get a collection of license requirements for milldeware servers", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseRequirementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/compliance/virtual-machines": {
      "get": {
        "description": "Returns a collection of license compliance statuses with any Oracle Middleware product.",
        "operationId": "virtual-machines4",
         "tags": [
          "Middleware"
        ],
       "summary": "Get a collection of compiance status for middleware virtual machines", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateComplianceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/license-assignments/virtual-machines": {
      "get": {
        "description": "Returns a collection of license assignments with any Oracle Middleware product.",
        "operationId": "virtual-machines5",
         "tags": [
          "Middleware"
        ],
         "summary": "Get license assignments for middleware virtual machines", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseAssignmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/license-requirements/virtual-machines": {
      "get": {
        "description": "Returns a collection of license requirements with any Oracle Middleware product.",
        "operationId": "virtual-machines6",
         "summary": "Get license requirements for middleware virtual machines", 
         "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEstateLicenseRequirementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/installations": {
      "get": {
        "description": "Returns a collection of Oracle Middleware installations.",
        "operationId": "installations5",
        "tags": [
          "Middleware"
        ],
        "summary": "Get a collection of middleware installations", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfMiddlewareInstallationCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: You are not authorized to make the request. This could be because the token is expired or revoked. The recommended action is to reauthenticate and retry once.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/installations/{id}": {
      "get": {
        "description": "Returns the details of a given Oracle Middleware installation.",
        "operationId": "installations6",
        "summary": "Get middleware installation",
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the installation.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseInstallationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/installations/{id}/applications": {
      "get": {
        "description": "Returns a collection of applications for a uniquely identified Oracle Middleware installation.",
        "operationId": "applications",
        "summary": "Get a collection of applications for a middleware installation", 
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The installation identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfMiddlewareInstallationApplicationCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: You are not authorized to make the request. This could be because the token is expired or revoked. The recommended action is to reauthenticate and retry once.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/entitlements/orders": {
      "get": {
        "description": "Returns a collection of Oracle orders.",
        "operationId": "orders",
        "summary": "Get a collection of orders", 
         "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfOrderCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/entitlements/orders/{id}": {
      "get": {
        "description": "Returns the details of a given Oracle order.",
        "operationId": "orders2",
         "tags": [
          "Entitlements"
        ],
         "summary": "Get order", 
        "parameters": [
          {
            "name": "id",
            "description": "The unique ID of the order.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/entitlements/orders/{id}/licenses": {
      "get": {
        "description": "Returns a collection of licenses for a uniquely identified Oracle order.",
        "operationId": "licenses",
         "summary": "Get license details of an order", 
         "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The order identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfLicenseCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found: The operation you requested failed because a resource associated with your request could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/database/entitlements/compliance/products": {
      "get": {
        "description": "Returns a collection of Oracle Database product compliance statuses.",
        "operationId": "products",
        "summary": "Get a collection of database compliance status", 
        "tags": [
          "Entitlements"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfDatabaseProductComplianceCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: You are not authorized to make the request. This could be because the token is expired or revoked. The recommended action is to reauthenticate and retry once.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/middleware/entitlements/compliance/products": {
      "get": {
        "description": "Returns a collection of Oracle Middleware product compliance statuses.",
        "operationId": "products2",
            "summary": "Get a collection of middleware compliance status", 
        "tags": [
          "Middleware"
        ],    
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfMiddlewareProductComplianceCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized: You are not authorized to make the request. This could be because the token is expired or revoked. The recommended action is to reauthenticate and retry once.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/compliance-statuses": {
      "get": {
        "description": "Returns a collection of Oracle compliance statuses.",
        "operationId": "compliance-statuses",
        "summary": "Get a collection of compliance status", 
        "tags": [
          "Compliance"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfComplianceStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/compliance-statuses/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle compliance status.",
        "operationId": "compliance-statuses2",
        "summary": "Get compliance status", 
        "tags": [
          "Compliance"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The compliance status name.",       
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/environment-types": {
      "get": {
        "description": "Returns a collection of software environment types.",
        "operationId": "environment-types",
         "summary": "Get a collection of environment types", 
       "tags": [
          "Environment"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfEnvironmentTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/environment-types/{name}": {
      "get": {
        "description": "Returns the details of a given software environment type.",
        "operationId": "environment-types2",
        "summary": "Get environment type", 
        "tags": [
          "Environment"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The environment type name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/license-item-types": {
      "get": {
        "description": "Returns a collection of Oracle license item types.",
        "operationId": "license-item-types",
        "summary": "Get a collection of license item types", 
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfLicenseItemTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/license-item-types/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle license item type.",
        "operationId": "license-item-types2",
        "summary": "Get license item type",
                "tags": [
          "License"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The license type name.", 
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseItemTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/license-metric-types": {
      "get": {
        "description": "Returns a collection of Oracle license metric types.",
        "operationId": "license-metric-types",
        "summary": "Get a collection of license metric types", 
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfLicenseMetricTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/license-metric-types/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle license metric type.",
        "operationId": "license-metric-types2",
        "summary": "Get license metric type", 
        "tags": [
          "License"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The license metric type name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseMetricTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/licensing-types": {
      "get": {
        "description": "Returns a collection of Oracle licensing types.",
        "operationId": "licensing-types",
        "summary": "Get a collection of licensing types", 
         "tags": [
          "License"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfLicensingTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/licensing-types/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle licensing type.",
        "operationId": "licensing-types2",
         "tags": [
          "License"
        ],
        "summary": "Get licensing type", 
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The license type name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensingTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/partitioning-types": {
      "get": {
        "description": "Returns a collection of Oracle partitioning types.",
        "operationId": "partitioning-types",
        "summary": "Get a collection of partitioning types", 
         "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfPartitioningTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/partitioning-types/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle partitioning type.",
        "operationId": "partitioning-types2",
        "summary": "Get partitioning type", 
         "tags": [
          "Partition"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The partition type name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartitioningTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/categories": {
      "get": {
        "description": "Returns a collection of Oracle product categories.",
        "operationId": "categories",
        "tags": [
          "Categories"
        ],
        "summary": "Get a collection of product categories", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfProductCategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/categories/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle product category.",
        "operationId": "categories2",
        "summary": "Get product category", 
        "tags": [
          "Categories"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The partition type name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/product-compliance-statuses": {
      "get": {
        "description": "Returns a collection of Oracle product compliance statuses.",
        "operationId": "product-compliance-statuses",
        "summary": "Get a collection of product compliance statuses", 
        "tags": [
          "Compliance"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfProductComplianceStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/product-compliance-statuses/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle product compliance status.",
        "operationId": "product-compliance-statuses2",
        "summary": "Get product compliance status",
        "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The status name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductComplianceStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/products": {
      "get": {
        "description": "Returns a collection of Oracle products.",
        "operationId": "products3",
         "tags": [
          "Product"
        ],
        "summary": "Get a collection of products", 
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).",
            "schema": {
              "type": "string",
              "example": "status -eq \"active\""
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/products/{id}": {
      "get": {
        "description": "Returns the details of a given Oracle product.",
        "operationId": "products4",
        "summary": "Get product", 
                "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The product identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/types": {
      "get": {
        "description": "Returns a collection of Oracle product types.",
        "summary": "Get a collection of product types", 
        "operationId": "types",
                "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "page_size",
            "description": "The maximum number of items in the response.",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 100,
              "maximum": 1000
            }
          },
          {
            "name": "page_number",
            "description": "The page number.",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilteredResponseWithLinksOfProductTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    },
    "/sam/oracle/v1/types/{name}": {
      "get": {
        "description": "Returns the details of a given Oracle product type.",
        "operationId": "types2",
        "summary": "Get product type",
                "tags": [
          "Product"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The prodouct type name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK: Your request succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductTypeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Your request failed due to an internal error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "sam.oracle.r"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Pagination": {
        "type": "object",
        "description": "The pagination details.",
        "additionalProperties": false,
        "properties": {
          "page_size": {
            "type": "integer",
            "description": "The page size you requested.",
            "default": 100,
            "format": "int32",
            "example": 100
          },
          "page_number": {
            "type": "integer",
            "description": "The page number you requested.",
            "default": 1,
            "format": "int32",
            "example": 1
          },
          "total_pages": {
            "type": "integer",
            "description": "The total number of pages.",
            "format": "int32",
            "example": 751,
            "nullable": true
          }
        }
      },
      "Link": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "href": {
            "description": "The associated relative URL.",
            "type": "string",
            "example": "sam/oracle/v1/...",
            "nullable": true
          },
          "rel": {
            "description": "Specifies the relationship between the current document and the linked document/resource.",
            "type": "string",
            "example": "self",
            "nullable": true
          },
          "method": {
            "description": "The method to access related resources.",
            "type": "string",
            "example": "GET",
            "nullable": true
          }
        }
      },
      "EstateType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "VirtualMachines",
          "Servers",
          "Datacenters"
        ],
        "enum": [
          "VirtualMachines",
          "Servers",
          "Datacenters"
        ]
      },
      "ComplianceStatus": {
        "type": "string",
        "description": "Enumeration for Oracle compliance statuses.",
        "x-enumNames": [
          "NoProducts",
          "IncompleteData",
          "NotCompliant",
          "CompliantWithIssues",
          "Compliant"
        ],
        "enum": [
          "NoProducts",
          "IncompleteData",
          "NotCompliant",
          "CompliantWithIssues",
          "Compliant"
        ]
      },
      "HateoasResponse": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "properties": {
          "_links": {
            "type": "array",
            "description": "A collection of links to related resources.",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          }
        }
      },
      "BaseResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/HateoasResponse"
          },
          {
            "type": "object",
            "description": "Base response class.",
            "additionalProperties": false
          }
        ]
      },
      "EstateComplianceResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for estate license compliance status collection.",
            "additionalProperties": false,
            "properties": {
              "estateType": {
                "description": "Gets or sets the estate type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EstateType"
                  }
                ]
              },
              "computerId": {
                "type": "string",
                "description": "The unique ID of the computer.",
                "format": "guid",
                "nullable": true
              },
              "datacenterId": {
                "type": "string",
                "description": "The unique ID of the datacenter.",
                "format": "guid",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfEstateComplianceResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/EstateComplianceResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfEstateComplianceResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfEstateComplianceResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ErrorContent": {
        "type": "object",
        "description": "Contains error content.",
        "additionalProperties": false,
        "properties": {
          "code": {
            "type": "integer",
            "description": "The HTTP status code.",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "The error message."
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Response class for errors.",
        "additionalProperties": false,
        "properties": {
          "error": {
            "description": "The error details.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ErrorContent"
              }
            ]
          }
        }
      },
      "LicenseMetricType": {
        "type": "string",
        "description": "Enumeration for license metric types.",
        "x-enumNames": [
          "Nup",
          "Processor"
        ],
        "enum": [
          "Nup",
          "Processor"
        ]
      },
      "EstateLicenseAssignmentResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for estate license assignment collection.",
            "additionalProperties": false,
            "properties": {
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid",
                "nullable": true
              },
              "datacenterId": {
                "type": "string",
                "description": "Gets or sets the datacenter/cluster identifier.",
                "format": "guid",
                "nullable": true
              },
              "estateType": {
                "description": "Gets or sets the estate type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EstateType"
                  }
                ]
              },
              "orderId": {
                "type": "string",
                "description": "Gets or sets the order identifier.",
                "format": "guid"
              },
              "licenseId": {
                "type": "string",
                "description": "Gets or sets the license identifier.",
                "format": "guid"
              },
              "quantityAssigned": {
                "type": "integer",
                "description": "Gets or sets the assigned quantity.",
                "format": "int32"
              },
              "isManualAssigned": {
                "type": "boolean",
                "description": "```true``` if the estate license assignment is assigned manually; otherwise, ```false```."
              }
            }
          }
        ]
      },
      "FilteredResponseOfEstateLicenseAssignmentResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/EstateLicenseAssignmentResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfEstateLicenseAssignmentResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfEstateLicenseAssignmentResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "EstateLicenseRequirementResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for estate license requirement collection.",
            "additionalProperties": false,
            "properties": {
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid",
                "nullable": true
              },
              "datacenterId": {
                "type": "string",
                "description": "Gets or sets the datacenter/cluster identifier.",
                "format": "guid",
                "nullable": true
              },
              "estateType": {
                "description": "Gets or sets the estate type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EstateType"
                  }
                ]
              },
              "requiredQuantity": {
                "type": "integer",
                "description": "Gets or sets the required quantity.",
                "format": "int32"
              },
              "requiredQuantityDecimal": {
                "type": "number",
                "description": "Gets or sets the required quantity decimal.",
                "format": "decimal",
                "nullable": true
              },
              "notAllowedLicensableEntityTypes": {
                "type": "string",
                "description": "Gets or sets the not allowed licensable entity types.",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfEstateLicenseRequirementResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/EstateLicenseRequirementResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfEstateLicenseRequirementResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfEstateLicenseRequirementResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "databaseName": {
                "type": "string",
                "description": "Gets or sets the database name."
              },
              "productVersion": {
                "type": "string",
                "description": "Gets or sets the product version."
              },
              "isRac": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is RAC.",
                "nullable": true
              },
              "isDataGuard": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is Data Guard.",
                "nullable": true
              },
              "scanDate": {
                "type": "string",
                "description": "Gets or sets the scan date.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationManagementPacksSummaryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation management pack summary collection.",
            "additionalProperties": false,
            "properties": {
              "isOemReposPrior10G": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OEM Repos Prior 10G.",
                "nullable": true
              },
              "isOemProgPrior10G": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OEM Prog Prior 10G.",
                "nullable": true
              },
              "isOemRepos10GAndHigher": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OEM Repos 10G And Higher.",
                "nullable": true
              },
              "isOemPackGrant": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OEM Pack Grant.",
                "nullable": true
              },
              "isOemPackAgree": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OEM Pack Agree.",
                "nullable": true
              },
              "isOemManagedTargets": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OemManagedTargets.",
                "nullable": true
              },
              "isDbControl10GPackGrant": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is DbControl 10G Pack Grant.",
                "nullable": true
              },
              "isDbControl10GPackAgree": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is DbControl 10G Pack Agree.",
                "nullable": true
              },
              "managementPackAccess11G": {
                "type": "string",
                "description": "Gets or sets the management pack access 11G."
              },
              "isSqlProfilesUsed": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is SQL profiles used.",
                "nullable": true
              }
            }
          }
        ]
      },
      "DatabaseInstallationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "identifier": {
                "type": "string",
                "description": "Gets or sets the identifier."
              },
              "productVersion": {
                "type": "string",
                "description": "Gets or sets the product version."
              },
              "databaseName": {
                "type": "string",
                "description": "Gets or sets the database name."
              },
              "databaseUniqueName": {
                "type": "string",
                "description": "Gets or sets the database unique name."
              },
              "databaseDomain": {
                "type": "string",
                "description": "Gets or sets the database domain."
              },
              "globalName": {
                "type": "string",
                "description": "Gets or sets the global name."
              },
              "mode": {
                "type": "string",
                "description": "Gets or sets the mode."
              },
              "scanDate": {
                "type": "string",
                "description": "Gets or sets the scan date.",
                "format": "date-time"
              },
              "processorsAssigned": {
                "type": "integer",
                "description": "Gets or sets the processors assigned.",
                "format": "int32",
                "nullable": true
              },
              "cpuSocketCount": {
                "type": "integer",
                "description": "Gets or sets the cpu socket count.",
                "format": "int32",
                "nullable": true
              },
              "cpuCoreCount": {
                "type": "integer",
                "description": "Gets or sets the cpu core count.",
                "format": "int32",
                "nullable": true
              },
              "cpuHighWater": {
                "type": "integer",
                "description": "Gets or sets the cpu high-water.",
                "format": "int32",
                "nullable": true
              },
              "cpuCoreHighWater": {
                "type": "integer",
                "description": "Gets or sets the cpu core high-water.",
                "format": "int32",
                "nullable": true
              },
              "isManagedByOEM": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether it is managed by OEM.",
                "nullable": true
              },
              "isVaultInstalled": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether the vault is installed.",
                "nullable": true
              },
              "isVaultUsed": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether the vault is used.",
                "nullable": true
              },
              "maxMemoryUsed": {
                "type": "integer",
                "description": "Gets or sets the max memory used.",
                "format": "int64",
                "nullable": true
              },
              "isNoInventory": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is no inventory."
              },
              "isUsedBy3PP": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is used by 3PP.",
                "nullable": true
              },
              "failOverClient": {
                "type": "string",
                "description": "Gets or sets the failover client."
              },
              "failOverServer": {
                "type": "string",
                "description": "Gets or sets the failover server."
              },
              "isDataGuard": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is Data Guard.",
                "nullable": true
              },
              "logArchiveConfig": {
                "type": "string",
                "description": "Gets or sets the log archive config."
              },
              "databaseRole": {
                "type": "string",
                "description": "Gets or sets the database role."
              },
              "openMode": {
                "type": "string",
                "description": "Gets or sets the open mode."
              },
              "switchoverStatus": {
                "type": "string",
                "description": "Gets or sets the switchover status."
              },
              "protectionMode": {
                "type": "string",
                "description": "Gets or sets the protection mode."
              },
              "isRac": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is RAC.",
                "nullable": true
              },
              "isRMANDB": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is RMANDB.",
                "nullable": true
              },
              "isOEMDB": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is OEMDB.",
                "nullable": true
              },
              "isCDB": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is CDB.",
                "nullable": true
              },
              "isPDB": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is PDB.",
                "nullable": true
              },
              "numberOfInstances": {
                "type": "integer",
                "description": "Gets or sets the number of instances.",
                "format": "int32",
                "nullable": true
              },
              "createdDate": {
                "type": "string",
                "description": "Gets or sets the created date.",
                "format": "date-time",
                "nullable": true
              },
              "oracleDBID": {
                "type": "string",
                "description": "Gets or sets the oracle DBID."
              },
              "cdbDBID": {
                "type": "string",
                "description": "Gets or sets the cdb DBID."
              },
              "summary": {
                "description": "Gets or sets the summary.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DatabaseInstallationManagementPacksSummaryResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationServerCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation server collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "licensingCoreFactor": {
                "type": "number",
                "description": "Gets or sets the licensing core factor.",
                "format": "decimal"
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationServerCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationServerCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationServerCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationServerCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationInstanceCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation instance collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "instanceName": {
                "type": "string",
                "description": "Gets or sets the instance name."
              },
              "hostName": {
                "type": "string",
                "description": "Gets or sets the host name."
              },
              "numberOfProcessorsAssigned": {
                "type": "integer",
                "description": "Gets or sets the mumber of processors assigned.",
                "format": "int32",
                "nullable": true
              },
              "cpuCoreCount": {
                "type": "integer",
                "description": "Gets or sets the cpu core count.",
                "format": "int32",
                "nullable": true
              },
              "cpuSocketCount": {
                "type": "integer",
                "description": "Gets or sets the cpu socket count.",
                "format": "int32",
                "nullable": true
              },
              "cpuHighwater": {
                "type": "integer",
                "description": "Gets or sets the cpu high-water.",
                "format": "int32",
                "nullable": true
              },
              "cpuCoreHighwater": {
                "type": "integer",
                "description": "Gets or sets the cpu core high-water.",
                "format": "int32",
                "nullable": true
              },
              "cpuSocketHighwater": {
                "type": "integer",
                "description": "Gets or sets the cpu socket high-water.",
                "format": "int32",
                "nullable": true
              },
              "instanceId": {
                "type": "string",
                "description": "Gets or sets the instance identifier.",
                "format": "guid"
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationInstanceCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationInstanceCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationInstanceCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationInstanceCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationOptionCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation option collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "tableOwner": {
                "type": "string",
                "description": "Gets or sets the table owner."
              },
              "isInstalled": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is installed."
              },
              "isUsed": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is used."
              },
              "lastUsed": {
                "type": "string",
                "description": "Gets or sets the last used.",
                "format": "date-time",
                "nullable": true
              },
              "firstUsed": {
                "type": "string",
                "description": "Gets or sets the first used.",
                "format": "date-time",
                "nullable": true
              },
              "detectedUsages": {
                "type": "integer",
                "description": "Gets or sets the detected usages.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationOptionCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationOptionCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationOptionCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationOptionCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationManagementPackCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation management pack collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "isInstalled": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is installed."
              },
              "isUsed": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is used."
              },
              "oraclePackUser": {
                "type": "string",
                "description": "Gets or sets the oracle pack user."
              },
              "oracleOemDate": {
                "type": "string",
                "description": "Gets or sets the oracle OEM date.",
                "format": "date-time",
                "nullable": true
              },
              "isPackAccessGranted": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is pack access granted.",
                "nullable": true
              },
              "isPackAccessAgreed": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is pack access agreed.",
                "nullable": true
              },
              "packAccessAgreedDate": {
                "type": "string",
                "description": "Gets or sets the pack access agreed date.",
                "format": "date-time",
                "nullable": true
              },
              "packAccessAgreedBy": {
                "type": "string",
                "description": "Gets or sets the pack access agreed by."
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationManagementPackCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationManagementPackCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationManagementPackCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationManagementPackCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationFeatureCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation feature collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              },
              "isUsed": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is used.",
                "nullable": true
              },
              "firstUsed": {
                "type": "string",
                "description": "Gets or sets the first used.",
                "format": "date-time",
                "nullable": true
              },
              "lastUsed": {
                "type": "string",
                "description": "Gets or sets the last used.",
                "format": "date-time",
                "nullable": true
              },
              "description": {
                "type": "string",
                "description": "Gets or sets the description."
              },
              "detectedUsages": {
                "type": "integer",
                "description": "Gets or sets the detected usages.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationFeatureCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationFeatureCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationFeatureCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationFeatureCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationUserCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation user collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "userName": {
                "type": "string",
                "description": "Gets or sets the user name."
              },
              "createdDate": {
                "type": "string",
                "description": "Gets or sets the created date.",
                "format": "date-time",
                "nullable": true
              },
              "expireDate": {
                "type": "string",
                "description": "Gets or sets the expire date.",
                "format": "date-time"
              },
              "accountStatus": {
                "type": "string",
                "description": "Gets or sets the account status."
              },
              "lockDate": {
                "type": "string",
                "description": "Gets or sets the lock date.",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationUserCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationUserCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationUserCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationUserCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationSessionCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation session collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "sessionId": {
                "type": "string",
                "description": "Gets or sets the session identifier.",
                "format": "guid"
              },
              "osUser": {
                "type": "string",
                "description": "Gets or sets the os user."
              },
              "clientProgram": {
                "type": "string",
                "description": "Gets or sets the client program."
              },
              "oracleUser": {
                "type": "string",
                "description": "Gets or sets the oracle user."
              },
              "logonTime": {
                "type": "string",
                "description": "Gets or sets the logon date.",
                "format": "date-time",
                "nullable": true
              },
              "status": {
                "type": "string",
                "description": "Gets or sets the status."
              },
              "isBackgroundSession": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether it is background-session.",
                "nullable": true
              },
              "machine": {
                "type": "string",
                "description": "Gets or sets the machine."
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationSessionCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationSessionCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationSessionCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationSessionCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationOptionUsageFactEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation option usage fact.",
            "additionalProperties": false,
            "properties": {
              "factName": {
                "type": "string",
                "description": "Gets or sets the fact name."
              },
              "factValues": {
                "type": "string",
                "description": "Gets or sets the fact values."
              }
            }
          }
        ]
      },
      "DatabaseInstallationOptionUsageQueriesEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation option usage query.",
            "additionalProperties": false,
            "properties": {
              "queryName": {
                "type": "string",
                "description": "Gets or sets the query name."
              },
              "isUsageTriggered": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is usage triggered."
              },
              "usageFacts": {
                "type": "array",
                "description": "Gets or sets the usage facts.",
                
                "items": {
                  "$ref": "#/components/schemas/DatabaseInstallationOptionUsageFactEntity"
                }
              }
            }
          }
        ]
      },
      "DatabaseInstallationOptionUsageCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database installation option usage collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "groupName": {
                "type": "string",
                "description": "Gets or sets the group name."
              },
              "isUsageTriggered": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is usage triggered."
              },
              "usageQueries": {
                "type": "array",
                "description": "Gets or sets the usage queries.",
                
                "items": {
                  "$ref": "#/components/schemas/DatabaseInstallationOptionUsageQueriesEntity"
                }
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseInstallationOptionUsageCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseInstallationOptionUsageCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseInstallationOptionUsageCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseInstallationOptionUsageCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "JavaInstallationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for java installation collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid",
                "nullable": true
              },
              "runtimeName": {
                "type": "string",
                "description": "Gets or sets the runtime name."
              },
              "runtimeVersion": {
                "type": "string",
                "description": "Gets or sets the runtime version."
              },
              "vendor": {
                "type": "string",
                "description": "Gets or sets the vendor."
              },
              "version": {
                "type": "string",
                "description": "Gets or sets the version."
              }
            }
          }
        ]
      },
      "FilteredResponseOfJavaInstallationCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/JavaInstallationCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfJavaInstallationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfJavaInstallationCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "JavaInstallationFeatureCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for java installation features collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "featureId": {
                "type": "string",
                "description": "Gets or sets the feature identifier.",
                "format": "guid"
              },
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              },
              "status": {
                "type": "string",
                "description": "Gets or sets the status."
              },
              "version": {
                "type": "string",
                "description": "Gets or sets the version."
              },
              "vendor": {
                "type": "string",
                "description": "Gets or sets the vendor."
              },
              "createdDate": {
                "type": "string",
                "description": "Gets or sets the created date.",
                "format": "date-time"
              },
              "updatedDate": {
                "type": "string",
                "description": "Gets or sets the updated date.",
                "format": "date-time",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfJavaInstallationFeatureCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/JavaInstallationFeatureCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfJavaInstallationFeatureCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfJavaInstallationFeatureCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "MiddlewareInstallationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for middleware installation collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid"
              },
              "version": {
                "type": "string",
                "description": "Gets or sets the version."
              },
              "oracleHomePath": {
                "type": "string",
                "description": "Gets or sets the Oracle home path."
              },
              "firstDiscovered": {
                "type": "string",
                "description": "Gets or sets the first discovered date.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "FilteredResponseOfMiddlewareInstallationCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/MiddlewareInstallationCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfMiddlewareInstallationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfMiddlewareInstallationCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "MiddlewareInstallationApplicationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for middleware installation applications collection.",
            "additionalProperties": false,
            "properties": {
              "version": {
                "type": "string",
                "description": "Gets or sets the version."
              },
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              },
              "applicationId": {
                "type": "string",
                "description": "Gets or sets the application identifier.",
                "format": "guid"
              }
            }
          }
        ]
      },
      "FilteredResponseOfMiddlewareInstallationApplicationCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/MiddlewareInstallationApplicationCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfMiddlewareInstallationApplicationCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfMiddlewareInstallationApplicationCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "OrderCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for order collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the unique identifier.",
                "format": "guid"
              },
              "orderDate": {
                "type": "string",
                "description": "Gets or sets the order date.",
                "format": "date-time"
              },
              "orderName": {
                "type": "string",
                "description": "Gets or sets the order name."
              },
              "oracleOrderNumber": {
                "type": "string",
                "description": "Gets or sets the oracle order number."
              },
              "olsa": {
                "type": "string",
                "description": "Gets or sets the olsa."
              },
              "areaOfUse": {
                "type": "string",
                "description": "Gets or sets the area of use."
              },
              "createdDate": {
                "type": "string",
                "description": "Gets or sets the created date.",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "FilteredResponseOfOrderCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/OrderCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfOrderCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfOrderCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "LicenseItemType": {
        "type": "string",
        "description": "Enumeration for license item types.",
        "x-enumNames": [
          "Default",
          "Upgrade",
          "Migration"
        ],
        "enum": [
          "Default",
          "Upgrade",
          "Migration"
        ]
      },
      "LicenseCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for license collection.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the license identifier.",
                "format": "guid"
              },
              "orderId": {
                "type": "string",
                "description": "Gets or sets the order identifier.",
                "format": "guid"
              },
              "itemType": {
                "description": "Gets or sets the license item type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LicenseItemType"
                  }
                ]
              },
              "referstoItemId": {
                "type": "string",
                "description": "Gets or sets the refers to item identifier.",
                "format": "guid",
                "nullable": true
              },
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "licenseType": {
                "type": "string",
                "description": "Gets or sets the license type."
              },
              "licenseMetricType": {
                "description": "Gets or sets the license metric type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LicenseMetricType"
                  }
                ]
              },
              "quantity": {
                "type": "integer",
                "description": "Gets or sets the quantity.",
                "format": "int32"
              },
              "licenseCost": {
                "type": "number",
                "description": "Gets or sets the license cost.",
                "format": "decimal",
                "nullable": true
              },
              "licenseCostBase": {
                "type": "number",
                "description": "Gets or sets the license cost base.",
                "format": "decimal",
                "nullable": true
              },
              "supportCost": {
                "type": "number",
                "description": "Gets or sets the support cost.",
                "format": "decimal",
                "nullable": true
              },
              "supportCostBase": {
                "type": "number",
                "description": "Gets or sets the support cost base.",
                "format": "decimal",
                "nullable": true
              },
              "csi": {
                "type": "string",
                "description": "Gets or sets the SCI."
              },
              "supportContractId": {
                "type": "integer",
                "description": "Gets or sets the support contract identifier.",
                "format": "int32",
                "nullable": true
              },
              "isPerpertual": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether is perpertual."
              },
              "nonPerpertualYears": {
                "type": "integer",
                "description": "Gets or sets the non perpertual years.",
                "format": "int32",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfLicenseCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/LicenseCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfLicenseCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfLicenseCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ProductComplianceStatus": {
        "type": "string",
        "description": "Enumeration for Oracle product compliance statuses.",
        "x-enumNames": [
          "Compliant",
          "NotCompliant",
          "OverCompliant",
          "CompliantWithIssues"
        ],
        "enum": [
          "Compliant",
          "NotCompliant",
          "OverCompliant",
          "CompliantWithIssues"
        ]
      },
      "PartitioningType": {
        "type": "string",
        "description": "Enumeration for partitioning types.",
        "x-enumNames": [
          "None",
          "Soft",
          "Hard"
        ],
        "enum": [
          "None",
          "Soft",
          "Hard"
        ]
      },
      "DatabaseProductComplianceCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for database product compliance collection.",
            "additionalProperties": false,
            "properties": {
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "estateType": {
                "description": "Gets or sets the estate type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EstateType"
                  }
                ]
              },
              "estateName": {
                "type": "string",
                "description": "Gets or sets the estate name."
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid",
                "nullable": true
              },
              "datacenterId": {
                "type": "string",
                "description": "Gets or sets the datacenter/cluster identifier.",
                "format": "guid",
                "nullable": true
              },
              "isLicenseRequired": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether the license is required."
              },
              "totalAssignedLicenseProcessor": {
                "type": "integer",
                "description": "Gets or sets the total assigned license per processor metric.",
                "format": "int32"
              },
              "totalRequiredLicenseProcessor": {
                "type": "integer",
                "description": "Gets or sets the total required license per processor metric.",
                "format": "int32"
              },
              "totalAssignedLicenseNup": {
                "type": "integer",
                "description": "Gets or sets the total assigned license per NUP metric.",
                "format": "int32"
              },
              "totalRequiredLicenseNup": {
                "type": "integer",
                "description": "Gets or sets the total required license per NUP metric.",
                "format": "int32"
              },
              "allInstallationsCount": {
                "type": "integer",
                "description": "Gets or sets the installations count.",
                "format": "int32"
              },
              "installationsRequiredLicenseCount": {
                "type": "integer",
                "description": "Gets or sets the count of installations that require license.",
                "format": "int32"
              },
              "installationsNotRequiredLicenseCount": {
                "type": "integer",
                "description": "Gets or sets the count of installations that not require license.",
                "format": "int32"
              },
              "licenseMetricType": {
                "description": "Gets or sets the license metric item type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LicenseMetricType"
                  }
                ]
              },
              "productComplianceStatus": {
                "description": "Gets or sets the estate compliance status.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductComplianceStatus"
                  }
                ]
              },
              "coveredByProductId": {
                "type": "string",
                "description": "Gets or sets the covered by product identifier.",
                "format": "guid",
                "nullable": true
              },
              "coveredByEstate": {
                "type": "string",
                "description": "Gets or sets the covered by estate name."
              },
              "licenseNeeded": {
                "type": "integer",
                "description": "Gets or sets the license needed.",
                "format": "int32"
              },
              "partitioningType": {
                "description": "Gets or sets the partitioning type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PartitioningType"
                  }
                ]
              }
            }
          }
        ]
      },
      "FilteredResponseOfDatabaseProductComplianceCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/DatabaseProductComplianceCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfDatabaseProductComplianceCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfDatabaseProductComplianceCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "MiddlewareProductComplianceCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "productId": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "estateType": {
                "description": "Gets or sets the estate type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/EstateType"
                  }
                ]
              },
              "estateName": {
                "type": "string",
                "description": "Gets or sets the estate name."
              },
              "computerId": {
                "type": "string",
                "description": "Gets or sets the computer identifier.",
                "format": "guid",
                "nullable": true
              },
              "datacenterId": {
                "type": "string",
                "description": "Gets or sets the datacenter/cluster identifier.",
                "format": "guid",
                "nullable": true
              },
              "isLicenseRequired": {
                "type": "boolean",
                "description": "Gets or sets a flag indicating whether the license is required."
              },
              "totalAssignedLicenseProcessor": {
                "type": "integer",
                "description": "Gets or sets the total assigned license per processor metric.",
                "format": "int32"
              },
              "totalRequiredLicenseProcessor": {
                "type": "integer",
                "description": "Gets or sets the total required license per processor metric.",
                "format": "int32"
              },
              "totalAssignedLicenseNup": {
                "type": "integer",
                "description": "Gets or sets the total assigned license per NUP metric.",
                "format": "int32"
              },
              "totalRequiredLicenseNup": {
                "type": "integer",
                "description": "Gets or sets the total required license per NUP metric.",
                "format": "int32"
              },
              "allInstallationsCount": {
                "type": "integer",
                "description": "Gets or sets the installations count.",
                "format": "int32"
              },
              "installationsRequiredLicenseCount": {
                "type": "integer",
                "description": "Gets or sets the count of installations that require license.",
                "format": "int32"
              },
              "installationsNotRequiredLicenseCount": {
                "type": "integer",
                "description": "Gets or sets the count of installations that not require license.",
                "format": "int32"
              },
              "licenseMetricType": {
                "description": "Gets or sets the license metric item type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/LicenseMetricType"
                  }
                ]
              },
              "productComplianceStatus": {
                "description": "Gets or sets the estate compliance status.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ProductComplianceStatus"
                  }
                ]
              },
              "coveredByProductId": {
                "type": "string",
                "description": "Gets or sets the covered by product identifier.",
                "format": "guid",
                "nullable": true
              },
              "coveredByEstate": {
                "type": "string",
                "description": "Gets or sets the covered by estate name."
              },
              "licenseNeeded": {
                "type": "integer",
                "description": "Gets or sets the license needed.",
                "format": "int32"
              },
              "partitioningType": {
                "description": "Gets or sets the partitioning type.",
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/PartitioningType"
                  }
                ]
              }
            }
          }
        ]
      },
      "FilteredResponseOfMiddlewareProductComplianceCollectionResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/MiddlewareProductComplianceCollectionResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfMiddlewareProductComplianceCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfMiddlewareProductComplianceCollectionResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ComplianceStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for compliance status.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfComplianceStatusResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/ComplianceStatusResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfComplianceStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfComplianceStatusResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "EnvironmentTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for environment type.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfEnvironmentTypeResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/EnvironmentTypeResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfEnvironmentTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfEnvironmentTypeResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "LicenseItemTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for license item type.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfLicenseItemTypeResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/LicenseItemTypeResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfLicenseItemTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfLicenseItemTypeResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "LicenseMetricTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for license metric type.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfLicenseMetricTypeResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/LicenseMetricTypeResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfLicenseMetricTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfLicenseMetricTypeResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "LicensingTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for licensing type.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfLicensingTypeResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/LicensingTypeResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfLicensingTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfLicensingTypeResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "PartitioningTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for partitioning type.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfPartitioningTypeResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/PartitioningTypeResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfPartitioningTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfPartitioningTypeResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ProductCategoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for product category.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfProductCategoryResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/ProductCategoryResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfProductCategoryResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfProductCategoryResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ProductComplianceStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for product compliance status.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfProductComplianceStatusResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/ProductComplianceStatusResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfProductComplianceStatusResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfProductComplianceStatusResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ProductCategory": {
        "type": "string",
        "description": "Enumeration for Oracle product categories.",
        "x-enumNames": [
          "Database",
          "Middleware",
          "Java"
        ],
        "enum": [
          "Database",
          "Middleware",
          "Java"
        ]
      },
      "ProductType": {
        "type": "string",
        "description": "Enumeration for Oracle product types.",
        "x-enumNames": [
          "Database",
          "DatabaseEnterpriseOption",
          "DatabaseManagementPack",
          "ApplicationServer",
          "WebLogicSuiteOption",
          "WebLogicServerEnterpriseEditionOption",
          "ApplicationServerEnterpriseManagement",
          "JavaInstallation"
        ],
        "enum": [
          "Database",
          "DatabaseEnterpriseOption",
          "DatabaseManagementPack",
          "ApplicationServer",
          "WebLogicSuiteOption",
          "WebLogicServerEnterpriseEditionOption",
          "ApplicationServerEnterpriseManagement",
          "JavaInstallation"
        ]
      },
      "LicensingType": {
        "type": "string",
        "description": "Enumeration for license types.",
        "x-enumNames": [
          "None",
          "License",
          "Subscription"
        ],
        "enum": [
          "None",
          "License",
          "Subscription"
        ]
      },
      "ProductResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for product.",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "string",
                "description": "Gets or sets the product identifier.",
                "format": "guid"
              },
              "productName": {
                "type": "string",
                "description": "Gets or sets the product name."
              },
              "productEdition": {
                "type": "string",
                "description": "Gets or sets the product edition.",
                "nullable": true
              },
              "acronym": {
                "type": "string",
                "description": "Gets or sets the acronym.",
                "nullable": true
              }
            }
          }
        ]
      },
      "FilteredResponseOfProductResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/ProductResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfProductResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfProductResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      },
      "ProductTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
          {
            "type": "object",
            "description": "Response class for product type.",
            "additionalProperties": false,
            "properties": {
              "name": {
                "type": "string",
                "description": "Gets or sets the name."
              }
            }
          }
        ]
      },
      "FilteredResponseOfProductTypeResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            
            "items": {
              "$ref": "#/components/schemas/ProductTypeResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "FilteredResponseWithLinksOfProductTypeResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FilteredResponseOfProductTypeResponse"
          },
          {
            "type": "object",
            "description": "Generic response class supporting filtering and including links.",
            "additionalProperties": false,
            "properties": {
              "_links": {
                "type": "array",
                "description": "A collection of links to related resources.",
                "items": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          }
        ]
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}