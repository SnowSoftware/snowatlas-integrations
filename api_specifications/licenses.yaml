openapi: 3.0.0
info:
  title: 'SAM: Licenses'
  contact:
    name: Flexera
    url: https://www.flexera.com
  version: 1.7.0
servers:
  - url: https://{region}.snowsoftware.io
    description: You can find your **Data region** in the **Snow Atlas settings** menu, in **License details**. Your **Data region** is on the **General information** tab. For further information, see [General information](https://docs.snowsoftware.com/snow-atlas/en/UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f.html#UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f_section-idm4543865842761633102149279789 "https://docs.snowsoftware.com/snow-atlas/en/UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f.html#UUID-2d4ce22b-e2a9-b7b0-44b8-0ecc55c2959f_section-idm4543865842761633102149279789").
    variables:
      region:
        enum:
          - westeurope
          - australiasoutheast
          - eastus2
          - uksouth
        default: westeurope
paths:
  /api/sam/v1/licenses/{id}/upgrades:
    get:
      tags:
        - Upgrades
      summary: Get license upgrades
      description: Returns a collection of upgrades for a license.
      operationId: getLicenseUpgradeCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseUpgrade'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/upgrades/{upgradedLicenseId}:
    get:
      tags:
        - Upgrades
      summary: Get the details of a license upgrade
      description: Returns the details of a license upgrade.
      operationId: getLicenseUpgradeDetails
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: upgradedLicenseId
          in: path
          required: true
          description: The unique ID of the upgraded license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseUpgrade'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}/computers:
    get:
      tags:
        - Transfers
      summary: Get application license transfers
      description: Returns a collection of computer license transfers for an application.
      operationId: getComputerTransferCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerTransferCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}/computers/{computerId}:
    get:
      tags:
        - Transfers
      summary: Get application license transfers for a computer
      description: Returns a collection of license transfers for specific application on a computer.
      operationId: getComputerTransferDetailsCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: computerId
          in: path
          required: true
          description: The unique ID of the computer.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerTransferDetailsCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}/custom-values:
    get:
      tags:
        - Transfers
      summary: Get custom value license transfers
      description: Returns a collection of custom value license transfers.
      operationId: getCustomValueTransferCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfCustomValueTransferCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}/custom-values/{customId}:
    get:
      tags:
        - Transfers
      summary: Get application license custom value transfers
      description: Returns a collection of license transfers for a given custom value.
      operationId: getCustomValueTransferDetailsCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: customId
          in: path
          required: true
          description: The unique ID of the custom compare value.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfCustomValueTransferDetailsCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}:
    get:
      tags:
        - Transfers
      summary: Get application license transfers
      description: Returns a collection of license transfers for an application.
      operationId: getLicenseTransferCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseTransferCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}/users:
    get:
      tags:
        - Transfers
      summary: Get users license transfer details
      description: Returns a collection of user license transfers.
      operationId: getUserTransferCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserTransferCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/transfers/{applicationId}/users/{userId}:
    get:
      tags:
        - Transfers
      summary: Get user license transfer details
      description: Returns a collection of license transfers for a given user.
      operationId: getUserTransferDetailsCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserTransferDetailsCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/tracking-computers/{computerId}:
    get:
      tags:
        - Tracking
      summary: Get computer license tracking
      description: Returns a collection of application license tracking for a given computer.
      operationId: getApplicationsComputerTrackingCollection
      parameters:
        - name: computerId
          in: path
          required: true
          description: The unique ID of the computer.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfApplicationComputerTrackingCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/tracking/{applicationId}/computers:
    get:
      tags:
        - Tracking
      summary: Get computer license tracking for a given application
      description: Returns a collection of computer license tracking.
      operationId: getComputerTrackingCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerTrackingCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/tracking/{applicationId}/computers/{computerId}:
    get:
      tags:
        - Tracking
      summary: Get application license tracking for a computer
      description: Returns a collection of application license tracking for a given computer.
      operationId: getComputerTrackingDetailsCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: computerId
          in: path
          required: true
          description: The unique ID of the computer.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerTrackingDetailsCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/tracking/{applicationId}:
    get:
      tags:
        - Tracking
      summary: Get application license tracking details
      description: Returns a collection of license tracking for an application.
      operationId: getSiteAssignment
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseTracking'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/tracking/{applicationId}/users:
    get:
      tags:
        - Tracking
      summary: Get user license tracking for application
      description: Returns a collection of users license tracking.
      operationId: getUserTrackingCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserTrackingCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/tracking/{applicationId}/users/{userId}:
    get:
      tags:
        - Tracking
      summary: Get user license tracking for application
      description: Returns a collection of license tracking for a given user.
      operationId: getUserTrackingDetailsCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: userId
          in: path
          required: true
          description: The unique ID of the user.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserTrackingDetailsCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses-policies/{policyId}/fields:
    get:
      tags:
        - Policies
      summary: Get license policy fields
      description: Returns a collection of license policy fields.
      operationId: getLicensePolicyFieldCollection
      parameters:
        - name: policyId
          in: path
          required: true
          description: The unique ID of the policy.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicensePolicyFieldCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses-policies/{policyId}/fields/{fieldId}:
    get:
      tags:
        - Policies
      summary: Get license policy field details
      description: Returns the details of a license policy field.
      operationId: getLicensePolicyField
      parameters:
        - name: policyId
          in: path
          required: true
          description: The unique ID of the policy.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: fieldId
          in: path
          required: true
          description: The unique ID of the policy field.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicensePolicyField'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses-policies:
    get:
      tags:
        - Policies
      summary: Get license policies
      description: Returns a collection of license policies.
      operationId: getPolicyCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfPolicy'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses-policies/{policyId}:
    get:
      tags:
        - Policies
      summary: Get license policy details
      description: Returns the details of a license policy.
      operationId: getPolicy
      parameters:
        - name: policyId
          in: path
          required: true
          description: The unique ID of the policy.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/maintenance-periods:
    get:
      tags:
        - Periods
      summary: Get maintenance and support periods
      description: Returns a collection of maintenance and support periods.
      operationId: getLicenseMaintenanceAndSupportPeriods
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/maintenance-periods:
    get:
      tags:
        - Periods
      summary: Get license's maintenance and support periods
      description: Returns a collection of maintenance and support periods.
      operationId: getLicenseMaintenanceAndSupportPeriodsByLicenseId
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Periods
      summary: Add maintenance and support period
      description: Creates a maintenance and support period.
      operationId: addMaintenanceAndSupportPeriod
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenancePeriodRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    put:
      tags:
        - Periods
      summary: Replace maintenance and support periods
      description: Replaces the given license’s maintenance and support periods.
      operationId: replaceMaintenanceAndSupportPeriods
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfMaintenancePeriodRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfMaintenancePeriodCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Periods
      summary: Delete maintenance and support periods
      description: Removes the given license’s maintenance and support periods.
      operationId: deleteMaintenanceAndSupportPeriods
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/maintenance-periods/{periodId}:
    put:
      tags:
        - Periods
      summary: Replace maintenance and support period
      description: Replaces the given maintenance and support period.
      operationId: replaceMaintenanceAndSupportPeriod
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: periodId
          in: path
          required: true
          description: The unique ID of the maintenance and support period.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenancePeriodRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenancePeriod'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Periods
      summary: Delete maintenance and support period
      description: Removes the given maintenance and support period.
      operationId: deleteMaintenancePeriod
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: periodId
          in: path
          required: true
          description: The unique ID of the maintenance and support period.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses:
    get:
      tags:
        - Licenses
      summary: Get licenses
      description: Returns a collection of licenses.
      operationId: getLicenseCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Licenses
      summary: Add license
      description: Creates a license.
      operationId: addLicense
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}:
    get:
      tags:
        - Licenses
      summary: Get license
      description: Returns the details of the given license.
      operationId: getLicenseById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    put:
      tags:
        - Licenses
      summary: Replace license
      description: Replaces the given license.
      operationId: replaceLicense
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Licenses
      summary: Delete license
      description: Removes the given license.
      operationId: deleteLicense
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/bulk-update:
    post:
      summary: Bulk update licenses
      description: Modifies a collection of licenses.
      operationId: bulkUpdateLicenses
      tags:
        - Licenses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LicenseBulkUpdateOperation'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkSummaryResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses-entitlements:
    get:
      tags:
        - Entitlements
      summary: Get license entitlements
      description: Returns a collection of license entitlements.
      operationId: getLicenseEntitlementCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseEntitlement'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/entitlements/computers:
    get:
      tags:
        - Entitlements
      summary: Get computers applications entitlements
      description: Returns a collection of computers and applications entitlements.
      operationId: getComputerApplicationEntitlementCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerApplicationEntitlement'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/entitlements/entitlement-states:
    get:
      tags:
        - Entitlements
      summary: Get license entitlement states
      description: Returns a collection of entitlements states.
      operationId: getEntitlementStateCollection
      parameters:
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfEntitlementState'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/entitlements/users:
    get:
      tags:
        - Entitlements
      summary: Get user license entitlements
      description: Returns a collection of user entitlements.
      operationId: getUserApplicationEntitlementCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserApplicationEntitlement'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses-extended-coverage-types:
    get:
      tags:
        - Coverage
      summary: Get licenses extended coverage types
      description: Returns a collection of extended coverage types.
      operationId: getExtendedCoverageTypeCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfExtendedCoverageType'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/extended-coverage:
    get:
      tags:
        - Coverage
      summary: Get extended coverages
      description: Returns a collection of extended coverages.
      operationId: getLicenseExtendedCoverageCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseExtendedCoverage'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/extended-coverage/{coverageId}:
    get:
      tags:
        - Coverage
      summary: Get extended coverage
      description: Returns the details of an extended coverage.
      operationId: getLicenseExtendedCoverageDetails
      parameters:
        - name: coverageId
          in: path
          required: true
          description: The unique ID of the coverage.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseExtendedCoverage'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/costs:
    get:
      tags:
        - Costs
      summary: Get license costs
      description: Returns a collection of license costs.
      operationId: getLicenseCostCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfLicenseCost'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/costs/{organizationId}:
    get:
      tags:
        - Costs
      summary: Get a license costs for an organization
      description: Returns the details of a license costs for an organization.
      operationId: getLicenseCost
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: organizationId
          in: path
          required: true
          description: The unique ID of the organization.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseCost'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/costs-summary:
    get:
      tags:
        - Costs
      summary: Get a license costs summary
      description: Returns the details of a license costs.
      operationId: getLicenseCostSummary
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseCostSummary'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/compliance/summary/{applicationId}/allocation:
    get:
      tags:
        - Compliance
      summary: Get compliance allocation summary
      description: Returns a collection of compliance allocations for an application.
      operationId: getAllocationSummaryCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfAllocationSummaryCollectionItem'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/compliance/summary/{applicationId}:
    get:
      tags:
        - Compliance
      summary: Get compliance summary
      description: Returns a collection of application compliance summary.
      operationId: getComplianceSummaryCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComplianceSummaryCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/compliance/summary/{applicationId}/usage:
    get:
      tags:
        - Compliance
      summary: Get compliance usage summary
      description: Returns a collection of application compliance usage summary.
      operationId: getComplianceSummaryUsageCollection
      parameters:
        - name: applicationId
          in: path
          required: true
          description: The unique ID of the application.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComplianceSummaryUsageCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/assignment-types:
    get:
      tags:
        - Assignments
      summary: Get assignment types
      description: Returns a collection of assignment types.
      operationId: getAssignmentTypesCollection
      parameters:
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfAssignmentTypeCollection'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/assignments/computers:
    get:
      tags:
        - Assignments
      summary: Get license assignments to computers
      description: Returns a collection of a license's assignments to computers.
      operationId: getComputerAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Assignments
      summary: Add license assignment to computer
      description: Creates a license assignment to computer.
      operationId: addComputerAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputerAssignmentRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    put:
      tags:
        - Assignments
      summary: Replace license assignments to computers
      description: Replaces the given license’s assignments to computers.
      operationId: replaceComputerAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfComputerAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfComputerAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignments to computers
      description: Removes the given license’s assignments to computers.
      operationId: deleteComputerAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/computers/{assignmentId}:
    get:
      tags:
        - Assignments
      summary: Get license assignment to computer
      description: Returns the details of the given license assignment to computer.
      operationId: getComputerAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputerAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    put:
      tags:
        - Assignments
      summary: Replace license assignment to computer
      description: Replaces the given license assignment to computer.
      operationId: replaceComputerAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComputerAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputerAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignment to computer
      description: Removes the given license assignment to computer.
      operationId: deleteComputerAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/datacenters:
    get:
      tags:
        - Assignments
      summary: Get license assignments to datacenters
      description: Returns a collection of a license's assignments to datacenters.
      operationId: getDatacenterAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfDatacenterAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Assignments
      summary: Add license assignment to datacenter
      description: Creates a license assignment to datacenter.
      operationId: addDatacenterAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatacenterAssignmentRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    put:
      tags:
        - Assignments
      summary: Replace license assignments to datacenters
      description: Replaces the given license’s assignments to datacenters.
      operationId: replaceDataCenterAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfDatacenterAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfDatacenterAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignments to datacenters
      description: Removes the given license’s assignments to datacenters.
      operationId: deleteDataCenterAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/datacenters/{assignmentId}:
    get:
      tags:
        - Assignments
      summary: Get license assignment to datacenter
      description: Returns the details of the given license assignment to datacenter.
      operationId: getDatacenterAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatacenterAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    put:
      tags:
        - Assignments
      summary: Replace license assignment to datacenter
      description: Replaces the given license assignment to datacenter.
      operationId: replaceDatacenterAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatacenterAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatacenterAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignment to datacenter
      description: Removes the given license assignment to datacenter.
      operationId: deleteDatacenterAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments-summary:
    get:
      tags:
        - Assignments
      summary: Get license assignments summary
      description: Returns the details of a license's assignments.
      operationId: getLicenseAssignmentDetails
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseAssignmentDetails'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
  /api/sam/v1/licenses/{id}/assignments/organizations:
    get:
      tags:
        - Assignments
      summary: Get license assignments to organizations
      description: Returns a collection of a license's assignments to organizations.
      operationId: getOrganizationAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfOrganizationAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Assignments
      summary: Add license assignment to organization
      description: Creates a license assignment to organization.
      operationId: addOrganizationAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationAssignmentRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    put:
      tags:
        - Assignments
      summary: Replace license assignments to organizations
      description: Replaces the given license’s assignments to organizations.
      operationId: replaceOrganizationAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfOrganizationAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfOrganizationAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignments to organizations
      description: Removes the given license’s assignments to organizations.
      operationId: deleteOrganizationAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/organizations/{assignmentId}:
    get:
      tags:
        - Assignments
      summary: Get license assignment to organization
      description: Returns the details of the given license assignment to organization.
      operationId: getOrganizationAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    put:
      tags:
        - Assignments
      summary: Replace license assignment to organization
      description: Replaces the given license assignment to organization.
      operationId: replaceOrganizationAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignment to organization
      description: Removes the given license assignment to organization.
      operationId: deleteOrganizationAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/site:
    get:
      tags:
        - Assignments
      summary: Get license assignment to site
      description: Returns the details of the given license’s assignment to site.
      operationId: getSiteAssignment2
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Assignments
      summary: Add license assignment to site
      description: Creates a license assignment to site.
      operationId: createSiteAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteAssignmentRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/site/{assignmentId}:
    put:
      tags:
        - Assignments
      summary: Replace license assignment to site
      description: Replaces the given license assignment to site.
      operationId: replaceSiteAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignment to site
      description: Removes the given license assignment to site.
      operationId: deleteSiteAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/users:
    get:
      tags:
        - Assignments
      summary: Get license assignments to users
      description: Returns a collection of a license's assignments to users.
      operationId: getUserAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: filter
          in: query
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          schema:
            type: string
          example: filter=status -eq "active"
        - name: page_number
          in: query
          description: The page number.
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: page_size
          in: query
          description: The maximum number of items in the response.
          schema:
            type: integer
            default: 100
            minimum: 1
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    post:
      tags:
        - Assignments
      summary: Add license assignment to user
      description: Creates a license assignment to user.
      operationId: addUserAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAssignmentRequest'
      responses:
        '201':
          description: 'Created: Your request created something new. Usually, this is a call that used the POST method and will allow a GET method to retrieve it later.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedHateoasResponse'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    put:
      tags:
        - Assignments
      summary: Replace license assignments to users
      description: Replaces the given license’s assignments to users.
      operationId: replaceUserAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListOfUserAssignmentRequest'
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HateoasCollectionOfUserAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
    delete:
      tags:
        - Assignments
      summary: Delete license assignments to users
      description: Removes the given license’s assignment to users.
      operationId: deleteUserAssignmentCollection
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
  /api/sam/v1/licenses/{id}/assignments/users/{assignmentId}:
    get:
      tags:
        - Assignments
      summary: Get license assignment to user
      description: Returns the details of the given license assignment to user.
      operationId: getUserAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '200':
          description: 'OK: Your request succeeded.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAssignment'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.r
    delete:
      tags:
        - Assignments
      summary: Delete license assignment to user
      description: Removes the given license assignment to user.
      operationId: deleteUserAssignment
      parameters:
        - name: id
          in: path
          required: true
          description: The unique ID of the license.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        - name: assignmentId
          in: path
          required: true
          description: The unique ID of the assignment.
          schema:
            type: string
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
      responses:
        '204':
          description: 'No Content: Your request succeeded, but the response message was empty.'
        '400':
          description: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 400
                  message: 'Bad Request: Your request is invalid or improperly formed. Consequently, the API server could not understand your request.'
        '404':
          description: 'Not Found: The operation you requested failed because a resource associated with your request could not be found.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 404
                  message: Resource with ID '32aeda0a-80dc-475a-907f-2d250a3a8614' not found.
        '500':
          description: 'Internal Server Error: Your request failed due to an internal error.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: 500
                  message: The service encountered an unexpected condition that prevented it from fulfilling the request.
      security:
        - BearerAuth:
            - sam.license.crud
components:
  schemas:
    Pagination:
      type: object
      description: The pagination details.
      additionalProperties: false
      required:
        - page_size
        - page_number
      properties:
        page_size:
          type: integer
          description: The page size you requested.
          format: int32
          example: 25
        page_number:
          type: integer
          description: The page number you requested.
          format: int32
          example: 1
        total_pages:
          type: integer
          description: The total number of pages.
          format: int32
          nullable: true
          example: 5
        total_items:
          type: integer
          description: The total number of items.
          format: int32
          nullable: true
          example: 100
    Link:
      type: object
      description: Represents a hypermedia link referenced from a IResource, according to HATEOAS.
      additionalProperties: false
      properties:
        href:
          type: string
          description: The associated relative URL.
          nullable: true
          example: /api/custom-fields/v1/custom-fields
        rel:
          type: string
          description: Specifies the relationship between the current document and the linked document/resource.
          nullable: true
          example: self
        method:
          type: string
          description: The method to access related resources.
          nullable: true
          example: GET
    HateoasResource:
      type: object
      additionalProperties: false
      required:
        - _links
      properties:
        _links:
          type: array
          description: A collection of links to related resources.
          items:
            $ref: '#/components/schemas/Link'
    LicenseUpgrade:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The quantity.
              format: int32
              example: 1
            upgradedLicenseId:
              type: string
              description: The unique ID of the upgraded license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            upgradedQuantity:
              type: integer
              description: The upgraded quantity.
              format: int32
              example: 1
    FilteredResponseOfLicenseUpgrade:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseUpgrade'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseUpgrade:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseUpgrade'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'
    Error:
      description: The error details.
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: The HTTP status code.
        message:
          type: string
          description: The error message.
    ComputerTransferCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            computerId:
              type: string
              description: The unique ID of the computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            fromApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            toApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    FilteredResponseOfComputerTransferCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComputerTransferCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComputerTransferCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComputerTransferCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ComputerTransferDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the computer transfer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            fromApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            toApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            computerId:
              type: string
              description: The unique ID of the computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            isUpgrade:
              type: boolean
              description: '```true``` if is upgrade; otherwise, ```false```.'
              example: true
            isDowngrade:
              type: boolean
              description: '```true``` if is downgrade; otherwise, ```false```.'
              example: true
            isCrossEdition:
              type: boolean
              description: '```true``` if is cross-edition; otherwise, ```false```.'
              example: true
            isCrossPlatform:
              type: boolean
              description: '```true``` if is cross-platform; otherwise, ```false```.'
              example: true
            quantity:
              type: integer
              description: The transferred quantity.
              format: int32
              example: 1
    FilteredResponseOfComputerTransferDetailsCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComputerTransferDetailsCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComputerTransferDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComputerTransferDetailsCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    CustomValueTransferCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            customCompareValueId:
              type: string
              description: The unique ID of the custom compare value.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            fromApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            toApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    FilteredResponseOfCustomValueTransferCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/CustomValueTransferCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfCustomValueTransferCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfCustomValueTransferCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    UseRightType:
      type: integer
      description: The use rights type.
      x-enumFlags: true
      x-enumNames:
        - None
        - Standard
        - UpgradeRights
        - DowngradeRights
        - CrossEdition
        - VirtualDesktopAccess
        - VmSupport
        - NinetyDayRule
        - ProcessorLimitations
        - ProcessorCoreLimitations
        - NamedComputer
        - NamedDatacenter
        - NamedApplicationCluster
        - NamedUser
        - Site
        - CrossPlatform
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
        - 16
        - 32
        - 256
        - 512
        - 1024
        - 8192
        - 16384
        - 32768
        - 65536
        - 131072
        - 262144
    CustomValueTransferDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the custom compare value transfer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            customCompareValueId:
              type: string
              description: The unique ID of the custom compare value.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            fromApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            toApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            isUpgrade:
              type: boolean
              description: '```true``` if is upgrade; otherwise, ```false```.'
              example: true
            isDowngrade:
              type: boolean
              description: '```true``` if is downgrade; otherwise, ```false```.'
              example: true
            isCrossEdition:
              type: boolean
              description: '```true``` if is cross-edition; otherwise, ```false```.'
              example: true
            isCrossPlatform:
              type: boolean
              description: '```true``` if is cross-platform; otherwise, ```false```.'
              example: true
            quantity:
              type: integer
              description: The transferred quantity.
              format: int32
              example: 1
            useRights:
              description: The use right type.
              example:
                - Standard
              oneOf:
                - $ref: '#/components/schemas/UseRightType'
    FilteredResponseOfCustomValueTransferDetailsCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/CustomValueTransferDetailsCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfCustomValueTransferDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfCustomValueTransferDetailsCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    LicenseTransferCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: A collection of license transfers.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            hasComputerTransfer:
              type: boolean
              description: '```true``` if has computer transfer; otherwise, ```false```.'
              example: true
            hasUserTransfer:
              type: boolean
              description: '```true``` if has user transfer; otherwise, ```false```.'
              example: true
            hasCustomCompareValueTransfer:
              type: boolean
              description: '```true``` if has custom compare value transfer; otherwise, ```false```.'
              example: true
    FilteredResponseOfLicenseTransferCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseTransferCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseTransferCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseTransferCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    UserTransferCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: A collection of application license transfers for user.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            userId:
              type: string
              description: The unique ID of the user.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            fromApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            toApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    FilteredResponseOfUserTransferCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/UserTransferCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfUserTransferCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfUserTransferCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    UserTransferDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the user transfer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            userId:
              type: string
              description: The unique ID of the user.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            fromApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            toApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            isUpgrade:
              type: boolean
              description: '```true``` if is upgrade; otherwise, ```false```.'
              example: true
            isDowngrade:
              type: boolean
              description: '```true``` if is downgrade; otherwise, ```false```.'
              example: true
            isCrossPlatform:
              type: boolean
              description: '```true``` if is cross-platform; otherwise, ```false```.'
              example: true
            isCrossEdition:
              type: boolean
              description: '```true``` if is cross-edition; otherwise, ```false```.'
              example: true
            quantity:
              type: integer
              description: The transferred quantity.
              format: int32
              example: 1
    FilteredResponseOfUserTransferDetailsCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/UserTransferDetailsCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfUserTransferDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfUserTransferDetailsCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ApplicationComputerTrackingCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the computer application tracking.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            computerId:
              type: string
              description: The unique ID of the computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            primaryUseRights:
              description: The primary user rights.
              example:
                - NamedComputer
              oneOf:
                - $ref: '#/components/schemas/UseRightType'
    FilteredResponseOfApplicationComputerTrackingCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ApplicationComputerTrackingCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfApplicationComputerTrackingCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfApplicationComputerTrackingCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ComputerTrackingDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the computer application tracking.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            computerId:
              type: string
              description: The unique ID of the computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            coverageTrait:
              type: integer
              description: The coverage tait.
              format: int32
              example: 1
            initialRequirement:
              type: integer
              description: The initial requirement.
              format: int32
              example: 1
            requirement:
              type: integer
              description: The requirement.
              format: int32
              example: 1
            receivedCoverage:
              type: integer
              description: The received coverage.
              format: int32
              example: 1
            primaryUseRights:
              description: The primary user rights.
              example:
                - NamedComputer
              oneOf:
                - $ref: '#/components/schemas/UseRightType'
            fullUseRights:
              description: The full use rights.
              example:
                - NamedComputer
                - UpgradeRights
              oneOf:
                - $ref: '#/components/schemas/UseRightType'
    ComputerTrackingCollection:
      allOf:
        - $ref: '#/components/schemas/ComputerTrackingDetailsCollection'
        - type: object
          additionalProperties: false
    FilteredResponseOfComputerTrackingCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComputerTrackingCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComputerTrackingCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComputerTrackingCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    FilteredResponseOfComputerTrackingDetailsCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComputerTrackingDetailsCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComputerTrackingDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComputerTrackingDetailsCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    LicenseTracking:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            hasComputerTracking:
              type: boolean
              description: '```true``` if has computer tracking; otherwise, ```false```.'
              example: true
            hasUserTracking:
              type: boolean
              description: '```true``` if has user tracking; otherwise, ```false```.'
              example: true
    FilteredResponseOfLicenseTracking:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseTracking'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseTracking:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseTracking'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    UserTrackingDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the user application tracking.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            userId:
              type: string
              description: The unique ID of the user.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            coverageTrait:
              type: integer
              description: The coverage tait.
              format: int32
              example: 1
            initialRequirement:
              type: integer
              description: The initial requirement.
              format: int32
              example: 1
            receivedCoverage:
              type: integer
              description: The received coverage.
              format: int32
              example: 1
            primaryUseRights:
              description: The primary user rights.
              example:
                - NamedComputer
              oneOf:
                - $ref: '#/components/schemas/UseRightType'
            fullUseRights:
              description: The full use rights.
              example:
                - NamedComputer
                - UpgradeRights
              oneOf:
                - $ref: '#/components/schemas/UseRightType'
    UserTrackingCollection:
      allOf:
        - $ref: '#/components/schemas/UserTrackingDetailsCollection'
        - type: object
          additionalProperties: false
    FilteredResponseOfUserTrackingCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/UserTrackingCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfUserTrackingCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfUserTrackingCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    FilteredResponseOfUserTrackingDetailsCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/UserTrackingDetailsCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfUserTrackingDetailsCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfUserTrackingDetailsCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    LicensePolicyFieldCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the policy field.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            name:
              type: string
              description: The policy field name.
              nullable: true
              example: InvoiceReference
            description:
              type: string
              description: The policy field description.
              nullable: true
              example: InvoiceReference
            isRequired:
              type: boolean
              description: '```true``` if is required; otherwise, ```false```.'
              example: true
            isComboBox:
              type: boolean
              description: '```true``` if is combo box; otherwise, ```false```.'
              example: true
            isEditingAllowed:
              type: boolean
              description: '```true``` if is editing allowed; otherwise, ```false```.'
              example: true
            listItems:
              type: array
              description: The list of item values.
              nullable: true
              example:
                - Item
              items:
                type: string
    FilteredResponseOfLicensePolicyFieldCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicensePolicyFieldCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicensePolicyFieldCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicensePolicyFieldCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    LicensePolicyField:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the policy field.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            name:
              type: string
              description: The policy field name.
              nullable: true
              example: InvoiceReference
            description:
              type: string
              description: The policy field description.
              nullable: true
              example: InvoiceReference
            isRequired:
              type: boolean
              description: '```true``` if is required; otherwise, ```false```.'
              nullable: true
              example: true
            isComboBox:
              type: boolean
              description: '```true``` if is combo box; otherwise, ```false```.'
              nullable: true
              example: true
            isEditingAllowed:
              type: boolean
              description: '```true``` if editing is allowed; otherwise, ```false```.'
              nullable: true
              example: true
            listItems:
              type: array
              description: The list of item values.
              nullable: true
              example:
                - Item
              items:
                type: string
    Policy:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: The license policy.
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the license policy.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    FilteredResponseOfPolicy:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/Policy'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfPolicy:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfPolicy'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    MaintenancePeriodCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the maintenance and support period.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            agreementPeriodId:
              type: string
              description: The unique ID of the agreement period.
              format: guid
              nullable: true
              example: 17597d2f-ae4b-4505-a85d-52a78421873c
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            validFrom:
              type: string
              description: The valid form date.
              format: date-time
              nullable: true
              example: '2024-01-01T00:00:00Z'
            validTo:
              type: string
              description: The valid to date.
              format: date-time
              nullable: true
              example: '2025-01-01T00:00:00Z'
            hasUpgradeRights:
              type: boolean
              description: '```true``` if has upgrade rights; otherwise, ```false```.'
              nullable: true
              example: true
            invoiceReference:
              type: string
              description: The invoice reference.
              nullable: true
              example: INV12345
            notes:
              type: string
              description: The notes.
              nullable: true
              example: Notes
            maintenanceCost:
              type: number
              description: The maintenance cost.
              format: decimal
              nullable: true
              example: 1000
            supportCost:
              type: number
              description: The support cost.
              format: decimal
              nullable: true
              example: 1000
            purchaseCurrency:
              type: string
              description: The purchase currency.
              nullable: true
              example: USD
    FilteredResponseOfMaintenancePeriodCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/MaintenancePeriodCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfMaintenancePeriodCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfMaintenancePeriodCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    MaintenancePeriodRequest:
      type: object
      additionalProperties: false
      properties:
        agreementPeriodId:
          type: string
          description: The unique ID of the agreement period.
          format: guid
          nullable: true
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        validFrom:
          type: string
          description: The valid form date.
          format: date-time
          nullable: true
          example: '2024-01-01T00:00:00Z'
        validTo:
          type: string
          description: The valid to date.
          format: date-time
          nullable: true
          example: '2025-01-01T00:00:00Z'
        hasUpgradeRights:
          type: boolean
          description: '```true``` if has upgrade rights; otherwise, ```false```.'
          example: true
        invoiceReference:
          type: string
          description: The invoice reference.
          nullable: true
          example: INV12345
        notes:
          type: string
          description: The notes.
          nullable: true
          example: Notes
        maintenanceCost:
          type: number
          description: The maintenance cost.
          format: decimal
          nullable: true
          example: 1000
        supportCost:
          type: number
          description: The support cost.
          format: decimal
          nullable: true
          example: 1000
    ListOfMaintenancePeriodRequest:
      type: array
      items:
        $ref: '#/components/schemas/MaintenancePeriodRequest'
    HateoasResponse:
      type: object
      description: Abstract class for IResource.
      x-abstract: true
      additionalProperties: false
      properties:
        _links:
          type: array
          description: A collection of links to related resources.
          items:
            $ref: '#/components/schemas/Link'
    CreatedHateoasResponse:
      allOf:
        - $ref: '#/components/schemas/HateoasResponse'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the resource.
              format: guid
    MaintenancePeriod:
      allOf:
        - $ref: '#/components/schemas/CreatedHateoasResponse'
        - type: object
          additionalProperties: false
          properties:
            validFrom:
              type: string
              description: The valid form date.
              format: date-time
              nullable: true
              example: '2024-01-01T00:00:00Z'
            validTo:
              type: string
              description: The valid to date.
              format: date-time
              nullable: true
              example: '2025-01-01T00:00:00Z'
            hasUpgradeRights:
              type: boolean
              description: '```true``` if has upgrade rights; otherwise, ```false```.'
              example: true
            maintenanceCost:
              type: number
              description: The maintenance cost.
              format: decimal
              nullable: true
              example: 1000
            supportCost:
              type: number
              description: The support cost.
              format: decimal
              nullable: true
              example: 1000
            purchaseCurrency:
              type: string
              description: The purchase currency.
              nullable: true
              example: USD
            invoiceReference:
              type: string
              description: The invoice reference.
              nullable: true
              example: INV12345
            notes:
              type: string
              description: The notes.
              nullable: true
              example: Notes
    IncompleteLicenseReason:
      type: integer
      description: The incomplete reason.
      x-enumFlags: true
      x-enumNames:
        - None
        - MissingApplication
        - MissingLicenseCount
        - MissingMetric
        - MissingBaseLicenses
        - InvalidSubscriptionPeriod
        - MissingValidFromToDate
        - MissingAgreementNumber
        - MissingAssignmentType
        - All
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
        - 16
        - 32
        - 64
        - 128
        - 255
    LicenseCollectionUpgrade:
      type: object
      additionalProperties: false
      properties:
        licenseId:
          type: string
          description: The unique ID of the license.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        quantity:
          type: integer
          description: The quantity.
          format: int32
          example: 1
        upgradedLicenseId:
          type: string
          description: The unique ID of the upgraded license.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        upgradedQuantity:
          type: integer
          description: The upgraded quantity.
          format: int32
          example: 1
    LicenseCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: The collection of licenses.
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            contractId:
              type: string
              description: The unique ID of the agreement.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            agreementId:
              type: string
              description: The unique ID of the agreement.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              nullable: true
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            assignmentTypeId:
              type: string
              description: The unique ID of the assignment type.
              format: guid
              nullable: true
              example: 8e5d8f69-c818-4575-9a91-aebae9a9eacc
            purchaseDate:
              type: string
              description: The purchase date.
              format: date-time
              example: '2024-01-01T00:00:00Z'
            purchaseValue:
              type: number
              description: The purchase value.
              format: decimal
              nullable: true
              example: 1000
            purchaseCurrency:
              type: string
              description: The purchase currency.
              nullable: true
              example: USD
            quantity:
              type: integer
              description: The quantity.
              format: int32
              nullable: true
              example: 1
            initialQuantity:
              type: integer
              description: The initial quantity.
              format: int32
              nullable: true
              example: 1
            mediaStorage:
              type: string
              description: The media storage.
              nullable: true
              example: path/to/file
            licenseProofLocation:
              type: string
              description: The license proof location.
              nullable: true
              example: path/to/licenseproof
            invoiceReference:
              type: string
              description: The invoice reference.
              nullable: true
              example: INV12345
            vendor:
              type: string
              description: The vendor.
              nullable: true
              example: Microsoft
            externalId:
              type: string
              description: The external ID.
              nullable: true
              example: EXT12345
            productDescription:
              type: string
              description: The product description.
              nullable: true
              example: MSDN
            isSubscription:
              type: boolean
              description: '```true``` if is subscription; otherwise, ```false```.'
              example: true
            isCrossEdition:
              type: boolean
              description: '```true``` if is cross-edition; otherwise, ```false```.'
              example: true
            isCrossPlatform:
              type: boolean
              description: '```true``` if is cross-platform; otherwise, ```false```.'
              example: true
            isUpgrade:
              type: boolean
              description: '```true``` if is upgrade; otherwise, ```false```.'
              example: true
            isDowngrade:
              type: boolean
              description: '```true``` if is downgrade; otherwise, ```false```.'
              example: true
            isIncomplete:
              type: boolean
              description: '```true``` if is incomplete; otherwise, ```false```.'
              example: true
            incompleteReasons:
              description: The incomplete license reasons.
              example:
                - MissingApplication
              oneOf:
                - $ref: '#/components/schemas/IncompleteLicenseReason'
            updatedDate:
              type: string
              description: The updated date.
              format: date-time
              example: '2024-01-01T00:00:00Z'
            createdDate:
              type: string
              description: The created date.
              format: date-time
              example: '2024-01-01T00:00:00Z'
            subscriptionValidFrom:
              type: string
              description: The subscription valid from date.
              format: date-time
              nullable: true
              example: '2024-01-01T00:00:00Z'
            subscriptionValidTo:
              type: string
              description: The subscription valid to date.
              format: date-time
              nullable: true
              example: '2025-01-01T00:00:00Z'
            activeMaintenanceCost:
              type: number
              description: The active maintenance cost.
              format: decimal
              example: 1000
            totalMaintenanceCost:
              type: number
              description: The total maintenance cost.
              format: decimal
              example: 1000
            activeSupportCost:
              type: number
              description: The active support cost.
              format: decimal
              example: 1000
            totalSupportCost:
              type: number
              description: The total support cost.
              format: decimal
              example: 1000
            totalLicenseCost:
              type: number
              description: The total license cost.
              format: decimal
              example: 1000
            upgradedLicenseCount:
              type: integer
              description: The upgraded license count.
              format: int32
              nullable: true
              example: 1000
            autoAllocateOnce:
              type: boolean
              description: '```true``` if has auto allocate once selected; otherwise, ```false```.'
              nullable: true
              example: true
            isAutoAllocated:
              type: boolean
              description: '```true``` if has auto allocate selected; otherwise, ```false```.'
              nullable: true
              example: true
            maintenanceAccordingToAgreement:
              type: boolean
              description: '```true``` if is maintenance and support periods are based on the agreement; otherwise, ```false```..'
              example: true
            skuId:
              type: string
              description: The unique ID of the sku.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            upgrades:
              type: array
              description: The collection of license upgrades.
              nullable: true
              items:
                $ref: '#/components/schemas/LicenseCollectionUpgrade'
            status:
              type: string
              description: The status of the license.
              allOf:
                - $ref: '#/components/schemas/Status'
              example: Active
            archivedDate:
              type: string
              description: The archived date.
              format: date-time
              nullable: true
              example: '2024-01-01T00:00:00Z'
              
    FilteredResponseOfLicenseCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    License:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            assignmentTypeId:
              type: string
              description: The unique ID of the assignment type.
              format: guid
              nullable: true
              example: 8e5d8f69-c818-4575-9a91-aebae9a9eacc
            autoAllocateOnce:
              type: boolean
              description: '```true``` if has auto allocate once selected; otherwise, ```false```.'
              nullable: true
              example: true
            isAutoAllocated:
              type: boolean
              description: '```true``` if has auto allocate selected; otherwise, ```false```.'
              nullable: true
              example: true
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            purchaseDate:
              type: string
              description: The purchase date.
              format: date-time
              example: '2024-01-01T00:00:00Z'
            purchaseValue:
              type: number
              description: The purchase value.
              format: decimal
              example: 1000
            purchaseCurrency:
              type: string
              description: The purchase currency.
              nullable: true
              example: USD
            quantity:
              type: integer
              description: The quantity.
              format: int32
              nullable: true
              example: 1
            licenseKeys:
              type: string
              description: The license keys.
              nullable: true
              example: 69658998-12-12031517-23
            mediaStorage:
              type: string
              description: The media storage.
              nullable: true
              example: path/to/file
            licenseProofLocation:
              type: string
              description: The license proof location.
              nullable: true
              example: path/to/licenseproof
            invoiceReference:
              type: string
              description: The invoice reference.
              nullable: true
              example: INV12345
            vendor:
              type: string
              description: The vendor.
              nullable: true
              example: Microsoft
            notes:
              type: string
              description: The notes.
              nullable: true
              example: Notes
            externalId:
              type: string
              description: The external ID.
              nullable: true
              example: EXT12345
            sku:
              type: string
              description: The stock keeping unit.
              nullable: true
              example: ABC-12345-S-BL
            productDescription:
              type: string
              description: The product description.
              nullable: true
              example: MSDN
            isSubscription:
              type: boolean
              description: '```true``` if is subscription; otherwise, ```false```.'
              example: true
            isCrossEdition:
              type: boolean
              description: '```true``` if is cross-edition; otherwise, ```false```.'
              example: true
            isCrossPlatform:
              type: boolean
              description: '```true``` if is cross-platform; otherwise, ```false```.'
              example: true
            isUpgrade:
              type: boolean
              description: '```true``` if is upgrade; otherwise, ```false```.'
              example: true
            isDowngrade:
              type: boolean
              description: '```true``` if is downgrade; otherwise, ```false```.'
              example: true
            isIncomplete:
              type: boolean
              description: '```true``` if is incomplete; otherwise, ```false```.'
              example: true
            incompleteReasons:
              description: The incomplete license reasons.
              example:
                - MissingApplication
              oneOf:
                - $ref: '#/components/schemas/IncompleteLicenseReason'
            contractId:
              type: string
              description: The unique ID of the agreement.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            agreementId:
              type: string
              description: The unique ID of the agreement.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            updatedDate:
              type: string
              description: The updated date.
              format: date-time
              example: '2024-01-01T00:00:00Z'
            createdDate:
              type: string
              description: The created date.
              format: date-time
              example: '2024-01-01T00:00:00Z'
            subscriptionValidFrom:
              type: string
              description: The subscription valid from date.
              format: date-time
              nullable: true
              example: '2024-01-01T00:00:00Z'
            subscriptionValidTo:
              type: string
              description: The subscription valid to date.
              format: date-time
              nullable: true
              example: '2025-01-01T00:00:00Z'
            upgradedLicenseCount:
              type: integer
              description: The upgraded license count.
              format: int32
              nullable: true
              example: 1
            maintenanceAccordingToAgreement:
              type: boolean
              description: '```true``` if is maintenance and support periods are based on the agreement; otherwise, ```false```..'
              example: true
            skuId:
              type: string
              description: The unique ID of the sku.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            hasVmUseRights:
              type: boolean
              description: '```true``` if has VM use rights; otherwise, ```false```.'
              nullable: true
              example: true
            numberOfSupportedVirtualMachines:
              type: integer
              description: The number of supported virtual machines.
              format: int32
              nullable: true
              example: 100
            status:
              type: string
              description: The status of the license.
              allOf:
                - $ref: '#/components/schemas/Status'
              example: Active
            archivedDate:
              type: string
              description: The archived date.
              format: date-time
              nullable: true
              example: '2024-01-01T00:00:00Z'
    SiteAssignmentRequest:
      type: object
      additionalProperties: false
      properties:
        organizationId:
          type: string
          description: The unique ID of the organization.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    LicenseUpgradeRequest:
      type: object
      additionalProperties: false
      properties:
        upgradedLicenseId:
          type: string
          description: The unique ID of the base license.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        upgradedQuantity:
          type: integer
          description: The quantity sent from the base license.
          format: int32
          example: 1
        quantity:
          type: integer
          description: The quantity received on the upgraded license.
          format: int32
          example: 1
    ComputerAssignmentRequest:
      type: object
      description: A collection of computer license assignments.
      additionalProperties: false
      properties:
        computerId:
          type: string
          description: The unique ID of the computer.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        quantity:
          type: integer
          description: The assigned quantity of licenses.
          format: int32
          example: 1
        virtualMachines:
          type: array
          description: The list of virtual machines.
          nullable: true
          example:
            - 49cdd99f-bc16-40f9-ad40-48f12182fb30
          items:
            type: string
            format: guid
    DatacenterAssignmentRequest:
      type: object
      additionalProperties: false
      properties:
        datacenterId:
          type: string
          description: The unique ID of the DCC.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        quantity:
          type: integer
          description: The assigned quantity of licenses.
          format: int32
          example: 1
        virtualMachines:
          type: array
          description: The list of virtual machines.
          nullable: true
          example:
            - 49cdd99f-bc16-40f9-ad40-48f12182fb30
          items:
            type: string
            format: guid
    OrganizationAssignmentRequest:
      type: object
      additionalProperties: false
      properties:
        organizationId:
          type: string
          description: The unique ID of the organization.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        quantity:
          type: integer
          description: The assigned quantity of licenses.
          format: int32
          example: 1
    UserAssignmentRequest:
      type: object
      additionalProperties: false
      properties:
        userId:
          type: string
          description: The unique ID of the user.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    LicenseRequest:
      type: object
      additionalProperties: false
      properties:
        agreementId:
          type: string
          description: The unique ID of the agreement.
          format: guid
          nullable: true
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        applicationId:
          type: string
          description: The unique ID of the application.
          format: guid
          nullable: true
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        autoAllocateOnce:
          type: boolean
          description: '```true``` if has auto allocate once selected; otherwise, ```false```.'
          nullable: true
          example: true
        assignmentTypeId:
          type: string
          description: The unique ID of the assignment type.
          format: guid
          nullable: true
          example: 8e5d8f69-c818-4575-9a91-aebae9a9eacc
        externalId:
          type: string
          description: The external ID.
          nullable: true
          example: EXT12345
        invoiceReference:
          type: string
          description: The invoice reference.
          nullable: true
          example: INV12345
        isAutoAllocated:
          type: boolean
          description: '```true``` if has auto allocate selected; otherwise, ```false```.'
          nullable: true
          example: true
        isCrossEdition:
          type: boolean
          description: '```true``` if is cross-edition; otherwise, ```false```.'
          example: true
        isCrossPlatform:
          type: boolean
          description: '```true``` if is cross-platform; otherwise, ```false```.'
          example: true
        isDowngrade:
          type: boolean
          description: '```true``` if is downgrade; otherwise, ```false```.'
          example: true
        isSubscription:
          type: boolean
          description: '```true``` if is subscription; otherwise, ```false```.'
          nullable: true
          example: true
        isUpgrade:
          type: boolean
          description: '```true``` if is upgrade; otherwise, ```false```.'
          example: true
        quantity:
          type: integer
          description: The quantity.
          format: int32
          nullable: true
          example: 1
        licenseKeys:
          type: string
          description: The license keys.
          nullable: true
          example: 69658998-12-12031517-23
        licenseProofLocation:
          type: string
          description: The license proof location.
          nullable: true
          example: path/to/licenseproof
        maintenanceAccordingToAgreement:
          type: boolean
          description: '```true``` if has maintenance according to agreement selected; otherwise, ```false```.'
          example: true
        mediaStorage:
          type: string
          description: The media storage.
          nullable: true
          example: path/to/file
        metricId:
          type: string
          description: The unique ID of the metric.
          format: guid
          nullable: true
          example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
        notes:
          type: string
          description: The notes.
          nullable: true
          example: Notes
        organizationId:
          type: string
          description: The unique ID of the organization.
          format: guid
          example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
        productDescription:
          type: string
          description: The product description.
          nullable: true
          example: MSDN
        purchaseDate:
          type: string
          description: The purchase date.
          format: date-time
          example: '2024-01-01T00:00:00Z'
        purchaseValue:
          type: number
          description: The purchase value.
          format: decimal
          nullable: true
          example: 1000
        purchaseCurrency:
          type: string
          description: The purchase currency.
          nullable: true
          example: USD
        sku:
          type: string
          description: The stock keeping unit.
          nullable: true
          example: ABC-12345-S-BL
        subscriptionValidFrom:
          type: string
          description: The subscription valid from date.
          format: date-time
          nullable: true
          example: '2024-01-01T00:00:00Z'
        subscriptionValidTo:
          type: string
          description: The subscription valid to date.
          format: date-time
          nullable: true
          example: '2025-01-01T00:00:00Z'
        vendor:
          type: string
          description: The vendor.
          nullable: true
          example: Microsoft
        upgrades:
          type: array
          description: The license upgrades.
          nullable: true
          items:
            $ref: '#/components/schemas/LicenseUpgradeRequest'
        maintenancePeriods:
          type: array
          description: The maintenance and support periods.
          nullable: true
          items:
            $ref: '#/components/schemas/MaintenancePeriodRequest'
        computerAssignments:
          type: array
          description: The computer assignments.
          nullable: true
          items:
            $ref: '#/components/schemas/ComputerAssignmentRequest'
        datacenterAssignments:
          type: array
          description: The datacenter assignments.
          nullable: true
          items:
            $ref: '#/components/schemas/DatacenterAssignmentRequest'
        organizationAssignments:
          type: array
          description: The organization assignments.
          nullable: true
          items:
            $ref: '#/components/schemas/OrganizationAssignmentRequest'
        userAssignments:
          type: array
          description: The user assignments.
          nullable: true
          items:
            $ref: '#/components/schemas/UserAssignmentRequest'
        siteAssignment:
          description: The site assignment.
          nullable: true
          oneOf:
            - $ref: '#/components/schemas/SiteAssignmentRequest'
        hasVmUseRights:
          type: boolean
          description: '```true``` if has VM use rights; otherwise, ```false```.'
          nullable: true
          example: true
        numberOfSupportedVirtualMachines:
          type: integer
          description: The number of VM supported by license.
          format: int32
          nullable: true
          example: 3
    IContractResolver:
      type: object
      x-abstract: true
      additionalProperties: false
    Object: {}
    OperationType:
      type: string
      description: The type of patch operation.
      x-enumNames:
        - Add
        - Remove
        - Replace
        - Move
        - Copy
        - Test
        - Invalid
      enum:
        - Add
        - Remove
        - Replace
        - Move
        - Copy
        - Test
        - Invalid
    OperationBase:
      type: object
      additionalProperties: false
      properties:
        path:
          type: string
          description: A JSON Pointer path.
          nullable: true
          example: /status
        op:
          type: string
          description: The operation to perform.
          nullable: true
          example: Replace
        from:
          type: string
          description: A JSON Pointer path.
          nullable: true
    Operation:
      allOf:
        - $ref: '#/components/schemas/OperationBase'
        - type: object
          additionalProperties: false
          properties:
            value:
              description: The value to add, replace, or test.
              nullable: true
              example: Archived
    OperationOfPatchLicenseRequest:
      allOf:
        - $ref: '#/components/schemas/Operation'
        - type: object
          additionalProperties: false
    JsonPatchDocumentOfPatchLicenseRequest:
      type: array
      items:
        $ref: '#/components/schemas/OperationOfPatchLicenseRequest'
    AssignmentType:
      type: string
      description: The assignment type.
      x-enumNames:
        - Organization
        - Computer
        - User
        - Site
      enum:
        - Organization
        - Computer
        - User
        - Site
    LicenseEntitlement:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: The license entitlement.
          additionalProperties: false
          properties:
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            assignmentType:
              description: The assignment type.
              example: Organization
              oneOf:
                - $ref: '#/components/schemas/AssignmentType'
            quantity:
              type: integer
              description: The quantity.
              format: int32
              example: 1
    FilteredResponseOfLicenseEntitlement:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseEntitlement'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseEntitlement:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseEntitlement'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ComputerApplicationEntitlement:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            computerId:
              type: string
              description: The unique ID of the computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            entitlementStateId:
              type: string
              description: The unique ID of the entitlement state.
              format: guid
              example: 6fb32edf-1d45-44e3-a55d-6df6068c0c08
    FilteredResponseOfComputerApplicationEntitlement:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComputerApplicationEntitlement'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComputerApplicationEntitlement:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComputerApplicationEntitlement'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    EntitlementState:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the entitlement state.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            name:
              type: string
              description: The name of the entitlement state.
              nullable: true
              example: Partially covered
            description:
              type: string
              description: The description of the entitlement state.
              nullable: true
              example: The virtual machine is licensed by the host it is running on.
    FilteredResponseOfEntitlementState:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/EntitlementState'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfEntitlementState:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfEntitlementState'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    UserApplicationEntitlement:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            userId:
              type: string
              description: The unique ID of the user.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            entitlementStateId:
              type: string
              description: The unique ID of the entitlement state.
              format: guid
              example: 6fb32edf-1d45-44e3-a55d-6df6068c0c08
    FilteredResponseOfUserApplicationEntitlement:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/UserApplicationEntitlement'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfUserApplicationEntitlement:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfUserApplicationEntitlement'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ExtendedCoverageType:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            name:
              type: string
              description: The type of the extended coverage.
              nullable: true
              example: Passive
    FilteredResponseOfExtendedCoverageType:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ExtendedCoverageType'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfExtendedCoverageType:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfExtendedCoverageType'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ExtendedCoverageReason:
      type: string
      description: The extended coverage reason.
      x-enumNames:
        - Other
        - Passive
        - Disaster
        - TestingOrDevelopment
      enum:
        - Other
        - Passive
        - Disaster
        - TestingOrDevelopment
    LicenseExtendedCoverage:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            parentComputerId:
              type: string
              description: The unique ID of the parent computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            isParentComputerDatacenter:
              type: boolean
              description: '```true``` if parent is datacenter; otherwise, ```false```.'
              example: true
            extendedComputerId:
              type: string
              description: The unique ID of the extended computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            coveredApplicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            reason:
              description: The incomplete license reason.
              example: Disaster
              oneOf:
                - $ref: '#/components/schemas/ExtendedCoverageReason'
            reasonDescription:
              type: string
              description: The reason description.
              nullable: true
              example: The recovery reason description
    FilteredResponseOfLicenseExtendedCoverage:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseExtendedCoverage'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseExtendedCoverage:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseExtendedCoverage'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    LicenseCost:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: The license cost.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            licenseQuantity:
              type: integer
              description: The quantity.
              format: int32
              example: 1
            licensePurchaseCost:
              type: number
              description: The license purchase value.
              format: decimal
              example: 1000
            currentMaintenanceCost:
              type: number
              description: The current maintenance cost.
              format: decimal
              example: 1000
            accumulatedMaintenanceCost:
              type: number
              description: The accumulated maintenance cost.
              format: decimal
              example: 1000
            currentSupportCost:
              type: number
              description: The current support cost.
              format: decimal
              example: 1000
            accumulatedSupportCost:
              type: number
              description: The accumulated support cost.
              format: decimal
              example: 1000
            totalCost:
              type: number
              description: The total license cost.
              format: decimal
              example: 1000
            currency:
              type: string
              description: The currency.
              nullable: true
              example: USD
    FilteredResponseOfLicenseCost:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/LicenseCost'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfLicenseCost:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfLicenseCost'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    LicenseCostSummary:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: The license cost summary.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The quantity.
              format: int32
              example: 1
            purchaseCost:
              type: number
              description: The license purchase value.
              format: decimal
              example: 1000
            currentMaintenanceCost:
              type: number
              description: The current maintenance cost.
              format: decimal
              example: 1000
            accumulatedMaintenanceCost:
              type: number
              description: The accumulated maintenance cost.
              format: decimal
              example: 1000
            currentSupportCost:
              type: number
              description: The current support cost.
              format: decimal
              example: 1000
            accumulatedSupportCost:
              type: number
              description: The accumulated support cost.
              format: decimal
              example: 1000
            totalCost:
              type: number
              description: The total license cost.
              format: decimal
              example: 1000
            averageCostPerLicensePurchase:
              type: number
              description: The average cost per license purchase.
              format: decimal
              example: 100
            currency:
              type: string
              description: The currency.
              nullable: true
              example: USD
    AllocationSummaryCollectionItem:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            requirement:
              type: integer
              description: The requirement quantity.
              format: int32
              example: 1
            coverage:
              type: integer
              description: The coverage of the assigned licenses.
              format: int32
              example: 1
            compliance:
              type: integer
              description: The compliance value.
              format: int32
              example: 1
    FilteredResponseOfAllocationSummaryCollectionItem:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/AllocationSummaryCollectionItem'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfAllocationSummaryCollectionItem:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfAllocationSummaryCollectionItem'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ComplianceSummaryCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            availableLicenses:
              type: integer
              description: The available licenses quantity.
              format: int32
              example: 1
            compliance:
              type: integer
              description: The compliance value.
              format: int32
              example: 1
            licensesPurchased:
              type: integer
              description: The number of licenses that have been purchased.
              format: int32
              example: 1
            incompleteLicenses:
              type: integer
              description: The number of incomplete licenses.
              format: int32
              example: 1
            expiredSubscriptionLicenses:
              type: integer
              description: The number of expired subscription licenses.
              format: int32
              example: 1
            invalidAssignments:
              type: integer
              description: The number of invalid assignments.
              format: int32
              example: 1
            unassigned:
              type: integer
              description: The number of unassigned licenses.
              format: int32
              example: 1
            assignedNamedUsers:
              type: integer
              description: The number of licenses assigned to named users.
              format: int32
              example: 1
            siteLicenses:
              type: integer
              description: The number of site licenses.
              format: int32
              example: 1
            downgradesGiven:
              type: integer
              description: The number of license downgrades given.
              format: int32
              example: 1
            downgradesReceived:
              type: integer
              description: The number of license downgrades received.
              format: int32
              example: 1
            upgradesGiven:
              type: integer
              description: The number of license upgrades given.
              format: int32
              example: 1
            upgradesReceived:
              type: integer
              description: The number of license upgrades received.
              format: int32
              example: 1
            crossPlatformGiven:
              type: integer
              description: The number of cross-platform licenses given.
              format: int32
              example: 1
            crossPlatformReceived:
              type: integer
              description: The number of cross-platform licenses received.
              format: int32
              example: 1
            crossEditionGiven:
              type: integer
              description: The number of cross-edition licenses given.
              format: int32
              example: 1
            crossEditionReceived:
              type: integer
              description: The number of cross-edition licenses received.
              format: int32
              example: 1
            initialRequirement:
              type: integer
              description: The initial requirement.
              format: int32
              example: 1
            includedInBundle:
              type: integer
              description: The number of licenses included in a bundle.
              format: int32
              example: 1
            outsideMetricPeriod:
              type: integer
              description: The number of licenses outside the metric period.
              format: int32
              example: 1
            secondaryUseRightsDesktopLaptop:
              type: integer
              description: The number of licenses for secondary use on desktop or laptop computers.
              format: int32
              example: 1
            secondaryUseRightsDevice:
              type: integer
              description: The number of licenses for secondary use on devices.
              format: int32
              example: 1
            extendedCoverageForDcc:
              type: integer
              description: The number of licenses for extended coverage for datacenter components.
              format: int32
              example: 1
            extendedCoverageForHosts:
              type: integer
              description: The number of licenses for extended coverage for hosts.
              format: int32
              example: 1
            multipleVersionEdition:
              type: integer
              description: The number of licenses for multiple version/edition rights.
              format: int32
              example: 1
            virtualDesktopInfrastructure:
              type: integer
              description: The number of licenses for virtual desktop infrastructure.
              format: int32
              example: 1
            minimumRequirement:
              type: integer
              description: The minimum license requirement.
              format: int32
              example: 1
            coreFactor:
              type: integer
              description: The core factor used for licensing.
              format: int32
              example: 1
            physicalHost:
              type: integer
              description: The number of licenses required for physical hosts.
              format: int32
              example: 1
            licenseRequirement:
              type: integer
              description: The license requirement.
              format: int32
              example: 1
            computerAppExclusions:
              type: integer
              description: The number of licenses excluded for a specific computer application.
              format: int32
              example: 1
            windowsServer:
              type: integer
              description: The number of licenses for Windows Server.
              format: int32
              example: 1
            sqlServer:
              type: integer
              description: The number of licenses for SQL Server.
              format: int32
              example: 1
            otherMetricCoverage:
              type: integer
              description: The coverage value for the other metric.
              format: int32
              example: 1
            siteCoverage:
              type: integer
              description: The number of licenses for site coverage.
              format: int32
              example: 1
            vmCoverage:
              type: integer
              description: The number of licenses for virtual machines.
              format: int32
              example: 1
            licenseStacking:
              type: integer
              description: The number of licenses for license stacking.
              format: int32
              example: 1
            namedUserCoverage:
              type: integer
              description: The number of licenses for named user coverage.
              format: int32
              example: 1
            licensingOtherMetrics:
              type: integer
              description: The number of licenses for other metrics.
              format: int32
              example: 1
            virtualDesktopAccess:
              type: integer
              description: The number of licenses for virtual desktop access.
              format: int32
              example: 1
            totalCoverage:
              type: integer
              description: The total coverage of licenses.
              format: int32
              example: 1
    FilteredResponseOfComplianceSummaryCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComplianceSummaryCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComplianceSummaryCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComplianceSummaryCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ComplianceSummaryUsageCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            metricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            licenseMetricId:
              type: string
              description: The unique ID of the metric.
              format: guid
              example: 5891a1d8-7fb0-45bd-b1f6-01c943f9c572
            otherMetricCoverage:
              type: integer
              description: The coverage value for the other metric.
              format: int32
              example: 1
            mainCoverage:
              type: integer
              description: The coverage value.
              format: int32
              example: 1
            isPartial:
              type: boolean
              description: '```true``` if is partial coverage; otherwise, ```false```.'
              example: true
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
    FilteredResponseOfComplianceSummaryUsageCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComplianceSummaryUsageCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComplianceSummaryUsageCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComplianceSummaryUsageCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    AssignmentTypeCollection:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            assignmentType:
              type: integer
              description: The assignment type.
              format: int32
              example: 0
            assignmentTypeId:
              type: string
              description: The unique ID of the assignment type.
              format: guid
              example: 8e5d8f69-c818-4575-9a91-aebae9a9eacc
            name:
              type: string
              description: The name of the assignment type.
              nullable: true
              example: Organization
    FilteredResponseOfAssignmentTypeCollection:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/AssignmentTypeCollection'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfAssignmentTypeCollection:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfAssignmentTypeCollection'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    InvalidAssignmentReasons:
      type: integer
      description: The invalid assignment reason.
      x-enumFlags: true
      x-enumNames:
        - None
        - SubscriptionExpired
        - Unassigned
        - ComputerMissing
        - InactiveComputer
        - UserMissing
        - DatacenterMissing
        - InvalidMetric
        - NoEliglibleApplicationInstalled
        - NoEligibleApplicationIsInstalledOnAnyComputerWhereUserIsPrimary
        - UserHasNotUsedAnyEligibleApplication
        - Incomplete
        - OverAssignment
        - InvalidQuantity
        - UserHasNotUsedAnyEligibleApplicationWithinPeriod
        - InvalidMetricGroup
        - InvalidProcessorCount
      enum:
        - 0
        - 1
        - 2
        - 4
        - 8
        - 16
        - 32
        - 64
        - 128
        - 256
        - 512
        - 1024
        - 2048
        - 4096
        - 8192
        - 16384
        - 32768
    ComputerAssignment:
      allOf:
        - $ref: '#/components/schemas/CreatedHateoasResponse'
        - type: object
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            computerId:
              type: string
              description: The unique ID of the computer.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The assigned quantity of licenses.
              format: int32
              nullable: true
              example: 1
            numberOfSupportedVirtualMachines:
              type: integer
              description: The number of supported virtual machines.
              format: int32
              nullable: true
              example: 1
            hasVmUseRights:
              type: boolean
              description: '```true``` if has VM use rights; otherwise, ```false```.'
              nullable: true
              example: true
            invalidAssignmentReasons:
              description: Invalid assignment reasons.
              nullable: true
              example:
                - OverAssignment
              oneOf:
                - $ref: '#/components/schemas/InvalidAssignmentReasons'
            virtualMachines:
              type: array
              description: The virtual machines.
              nullable: true
              example:
                - 49cdd99f-bc16-40f9-ad40-48f12182fb30
              items:
                type: string
                format: guid
    FilteredResponseOfComputerAssignment:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/ComputerAssignment'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfComputerAssignment:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfComputerAssignment'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ListOfComputerAssignmentRequest:
      type: array
      items:
        $ref: '#/components/schemas/ComputerAssignmentRequest'
    DatacenterAssignment:
      allOf:
        - $ref: '#/components/schemas/CreatedHateoasResponse'
        - type: object
          description: The DCC assignment.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            datacenterId:
              type: string
              description: The unique ID of the DCC.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The assigned quantity of licenses.
              format: int32
              nullable: true
              example: 1
            numberOfSupportedVirtualMachines:
              type: integer
              description: The number of supported virtual machines.
              format: int32
              nullable: true
              example: 1
            hasVmUseRights:
              type: boolean
              description: '```true``` if has VM use rights; otherwise, ```false```.'
              nullable: true
              example: true
            invalidAssignmentReasons:
              description: Invalid assignment reasons.
              nullable: true
              example:
                - OverAssignment
              oneOf:
                - $ref: '#/components/schemas/InvalidAssignmentReasons'
            virtualMachines:
              type: array
              description: The virtual machines.
              nullable: true
              example:
                - 49cdd99f-bc16-40f9-ad40-48f12182fb30
              items:
                type: string
                format: guid
    FilteredResponseOfDatacenterAssignment:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/DatacenterAssignment'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfDatacenterAssignment:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfDatacenterAssignment'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ListOfDatacenterAssignmentRequest:
      type: array
      items:
        $ref: '#/components/schemas/DatacenterAssignmentRequest'
    LicenseAssignmentDetails:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            hasOrganizationAssignment:
              type: boolean
              description: '```true``` if has organization assignment; otherwise, ```false```.'
              example: true
            hasComputerAssignment:
              type: boolean
              description: '```true``` if has computer assignment; otherwise, ```false```.'
              example: true
            hasUserAssignment:
              type: boolean
              description: '```true``` if has user assignment; otherwise, ```false```.'
              example: true
            hasSiteAssignment:
              type: boolean
              description: '```true``` if has site assignment; otherwise, ```false```.'
              example: true
    OrganizationAssignment:
      allOf:
        - $ref: '#/components/schemas/CreatedHateoasResponse'
        - type: object
          description: The organization assignment.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The assigned quantity of licenses.
              format: int32
              nullable: true
              example: 1
            isAutoAllocated:
              type: boolean
              description: '```true``` if has auto allocate selected; otherwise, ```false```.'
              example: true
    FilteredResponseOfOrganizationAssignment:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/OrganizationAssignment'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfOrganizationAssignment:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfOrganizationAssignment'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ListOfOrganizationAssignmentRequest:
      type: array
      items:
        $ref: '#/components/schemas/OrganizationAssignmentRequest'
    SiteAssignment:
      allOf:
        - $ref: '#/components/schemas/HateoasResource'
        - type: object
          description: The site assignment.
          additionalProperties: false
          properties:
            id:
              type: string
              description: The unique ID of the assignment.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            organizationId:
              type: string
              description: The unique ID of the organization.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The assigned quantity of licenses.
              format: int32
              nullable: true
              example: 1
    UserAssignment:
      allOf:
        - $ref: '#/components/schemas/CreatedHateoasResponse'
        - type: object
          description: The user assignment.
          additionalProperties: false
          properties:
            licenseId:
              type: string
              description: The unique ID of the license.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            applicationId:
              type: string
              description: The unique ID of the application.
              format: guid
              nullable: true
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            userId:
              type: string
              description: The unique ID of the user.
              format: guid
              example: 49cdd99f-bc16-40f9-ad40-48f12182fb30
            quantity:
              type: integer
              description: The assigned quantity of licenses.
              format: int32
              example: 1
            invalidAssignmentReasons:
              description: Invalid assignment reasons.
              nullable: true
              example:
                - OverAssignment
              oneOf:
                - $ref: '#/components/schemas/InvalidAssignmentReasons'
    FilteredResponseOfUserAssignment:
      type: object
      description: Filtered response.
      additionalProperties: false
      required:
        - items
        - pagination
      properties:
        items:
          type: array
          description: A collection of items.
          items:
            $ref: '#/components/schemas/UserAssignment'
        pagination:
          description: The pagination details.
          oneOf:
            - $ref: '#/components/schemas/Pagination'
    HateoasCollectionOfUserAssignment:
      allOf:
        - $ref: '#/components/schemas/FilteredResponseOfUserAssignment'
        - type: object
          additionalProperties: false
          required:
            - _links
          properties:
            _links:
              type: array
              description: A collection of links to related resources.
              items:
                $ref: '#/components/schemas/Link'
    ListOfUserAssignmentRequest:
      type: array
      items:
        $ref: '#/components/schemas/UserAssignmentRequest'
    Status:
      type: string
      description: The status of the license.
      x-enumDescriptions:
        Active: The license is active and affects compliance position.
        Archived: The license is archived and does not affect compliance position.
      example: Active
    LicenseBulkUpdateOperation:
      type: object
      required:
        - scope
        - body
      properties:
        filter:
          description: For more information on the available operators and which data types those operators work on, see [Filter API call results](https://docs.snowsoftware.io/snow-atlas-api/resources/get-started-with-apis/api-conventions#filter-api-call-results).
          type: string
          example: "id -eq '49cdd99f-bc16-40f9-ad40-48f12182fb30'"
        scope:
          description: The scope of the update operation.
          x-enumDescriptions:
            Only: The operation is performed only on the licenses whose IDs are specified.
            All: The operation is performed on all licenses.
            AllExcept: The operation is performed on every license except those whose IDs are specified.
          type: string
          example: Only
        ids:
          description: The IDs that the operation is performed on.
          type: array
          items:
            type: string
            format: uuid
        body:
          $ref: '#/components/schemas/LicenseUpdate'
    LicenseUpdate:
      description: The update to be applied to all IDs.
      type: object
      properties:
        status:
          description: The scope of the update operation.
          x-enumDescriptions:
            Active: The license is active and affects compliance position.
            Archived: The license is archived and does not affect compliance position.
          type: string
          example: Archived
    BulkSummaryResponse:
      type: object
      required:
        - successCount
        - failedCount
      properties:
        successCount:
          description: The number of items that succeeded in the operation.
          type: integer
          format: int64
          example: 10
        failedCount:
          description: The number of items that failed in the operation.
          type: integer
          format: int64
          example: 10
        failed:
          description: The IDs of the failed items.
          type: array
          items:
            type: string
          example:
            - e192ea5e-363c-47e4-82e3-d2587afada8c
        failureReason:
          description: The reason the bulk operation failed.
          type: string
          example: These licenses are used as base licenses.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: Assignments
  - name: Compliance
  - name: Costs
  - name: Coverage
  - name: Entitlements
  - name: Licenses
  - name: Periods
  - name: Policies
  - name: Tracking
  - name: Transfers
  - name: Upgrades
